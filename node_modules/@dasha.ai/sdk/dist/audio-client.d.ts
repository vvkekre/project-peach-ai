/// <reference types="node" />
import EventEmitter from "eventemitter3";
import { Readable, Writable } from "stream";
import { Account } from "./account";
import * as errors from "./errors";
export declare function connect(clientAccount: Account, options?: {
    additionalInfo?: string;
}): Promise<AudioChannel>;
export declare class AudioChannel extends EventEmitter<{
    error: [error: errors.Error];
    close: [];
}> {
    private _log;
    private _audioClientId;
    private _roomId;
    private _gatewayClient;
    private _connectionStream;
    private _audioStreamClient;
    private _backendAudioStream;
    private _audioMixer;
    private _init;
    private _handleError;
    private _handleTerminate;
    private _handleLeave;
    createReadableStream(options?: {
        channelCount?: number;
        sampleRate?: number;
    }): ReadableAudioStream;
    createWritableStream(options?: {
        channelCount?: number;
        sampleRate?: number;
    }): WritableAudioStream;
    disconnect(): void;
}
export declare class ReadableAudioStream extends Readable {
    private _backendAudioStream;
    private _backendSampleRate;
    private _channelCount;
    private _sampleRateRatio;
    private _isPushing;
    _read(_size: number): void;
    private _handleAudio;
    private _handleEnd;
    private _handleError;
}
export declare class WritableAudioStream extends Writable {
    private _audioMixer;
    private _channelCount;
    private _sampleRateRatio;
    _write(chunk: Buffer, _encoding: string, cb: () => void): void;
    _destroy(_error: Error): void;
}
