"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueuedConversation = exports.ConversationQueue = void 0;
const eventemitter3_1 = __importDefault(require("eventemitter3"));
const audio = __importStar(require("./audio"));
const errors = __importStar(require("./errors"));
const rest = __importStar(require("./rest-api"));
const sip = __importStar(require("./sip"));
const log_1 = require("./log");
const transcription_1 = require("./transcription");
/**
 * Manages planned conversations.
 *
 * A conversation may be _enqueued_, that is, planned to execute in a specific time frame.
 * When the conversation is to be executed, a `"ready"` event is fired on this object,
 * that gets passed a {@link Conversation} object to populate its input and run.
 *
 * The queue is stored on the Dasha platform. To associate an enqueued conversation
 * with its data, each conversation is assigned a _key_.
 *
 * @example running enqueued conversations
 * ```typescript
 * application.queue.on("ready", async (key, conversation) => {
 *   conversation.input = getInput(key);
 *   const result = await conversation.execute();
 * });
 * ```
 *
 * Sometimes, the conversation can be removed from the queue by the Dasha platform itself.
 * In that case, a `"rejected"` event is fired.
 *
 * @example conversation rejection
 * ```typescript
 * application.queue.on("rejected", (key, error) => {
 *   console.log(`conversation with key ${key} was rejected`, error);
 * });
 * ```
 *
 * There is an important caveat with the incoming SIP conversations.
 * They get placed in the queue automatically, by the Dasha platform itself.
 * To discern them from the manually-enqueued conversations, and to get the additional
 * SIP info (e.g. the SIP user and domain of the conversation partner),
 * the `"ready"` event has an extra argument of type {@link QueuedConversationInfo}.
 *
 * @example using SIP data in a conversation
 * ```typescript
 * application.queue.on("ready", (key, conversation, info) => {
 *   assert(info.sip !== undefined);
 *   conversation.input.from = `${info.fromUser}@${info.fromDomain}`;
 *   await conversation.execute();
 * });
 * ```
 */
class ConversationQueue extends eventemitter3_1.default {
    /** @internal */
    constructor(application, log) {
        super();
        this._ignoredJobKeys = new Set();
        this._activeConversationsByJobKey = new Map();
        this._isDisposed = false;
        this._handleJobTimedOut = (_jobId, jobKey) => {
            if (this._ignoredJobKeys.has(jobKey)) {
                this._ignoredJobKeys.delete(jobKey);
                return;
            }
            const conv = this._activeConversationsByJobKey.get(jobKey);
            if (conv !== undefined) {
                conv._timedOut = true;
                this._activeConversationsByJobKey.delete(jobKey);
            }
            this.emit("timeout", jobKey);
        };
        this._handleJobRejected = (_jobId, jobKey, data) => {
            if (this._ignoredJobKeys.has(jobKey)) {
                this._ignoredJobKeys.delete(jobKey);
                return;
            }
            const conv = this._activeConversationsByJobKey.get(jobKey);
            if (conv !== undefined) {
                conv._rejected = true;
                conv._rejectedReason = new errors.ConversationRejectedError(data);
                this._activeConversationsByJobKey.delete(jobKey);
            }
            if ((conv === null || conv === void 0 ? void 0 : conv._rejectedByUser) !== true) {
                this.emit("rejected", jobKey, log_1.logAndReturn(this._log, new errors.ConversationRejectedError(data)));
            }
        };
        this._handleJobStarting = (jobId, jobKey, jobData) => __awaiter(this, void 0, void 0, function* () {
            if (this._ignoredJobKeys.has(jobKey)) {
                this._ignoredJobKeys.delete(jobKey);
                return;
            }
            const conv = new QueuedConversation(this._application, jobId, jobKey, this._log);
            this._activeConversationsByJobKey.set(jobKey, conv);
            const sipInfo = sip._extractSipInfo(jobData);
            this.emit("ready", jobKey, conv, { sip: sipInfo });
            setTimeout(() => {
                if (conv._started || conv._rejected || conv._rejectedByUser)
                    return;
                conv._timedOut = true;
                this._application._rejectJob(jobId).catch((error) => this.emit("error", error));
            }, 2 * 60 * 1000);
        });
        this._handleJobCompleted = (_jobId, jobKey) => {
            this._activeConversationsByJobKey.delete(jobKey);
        };
        this._handleJobFailed = (_jobId, jobKey) => {
            this._activeConversationsByJobKey.delete(jobKey);
        };
        this._application = application;
        this._log = log.child({});
        application.on("_jobTimedOut", this._handleJobTimedOut);
        application.on("_jobRejected", this._handleJobRejected);
        application.on("_jobStarting", this._handleJobStarting);
        application.on("_jobCompleted", this._handleJobCompleted);
        application.on("_jobFailed", this._handleJobFailed);
    }
    /** @internal */
    _dispose() {
        if (this._isDisposed)
            return;
        this._isDisposed = true;
        this.removeAllListeners();
        this._application.off("_jobTimedOut", this._handleJobTimedOut);
        this._application.off("_jobRejected", this._handleJobRejected);
        this._application.off("_jobStarting", this._handleJobStarting);
        this._application.off("_jobCompleted", this._handleJobCompleted);
        this._application.off("_jobFailed", this._handleJobFailed);
    }
    /**
     * Push a new conversation into the queue.
     *
     * @param key a conversation key that can be used to associate data
     * @param options.after the earliest point in time the conversation can run at
     * @param options.before the latest point in time the conversation can run at
     * @returns Object with internal backend jobId
     * @example enqueue a conversation to within an hour
     * ```typescript
     * application.queue.push("key", {
     *   after: new Date(),
     *   before: new Date(Date.now() + 60 * 60 * 1000)
     * });
     * ```
     */
    push(key, options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const after = (_a = options === null || options === void 0 ? void 0 : options.after) !== null && _a !== void 0 ? _a : new Date();
            const before = (_b = options === null || options === void 0 ? void 0 : options.before) !== null && _b !== void 0 ? _b : new Date(after.valueOf() + 5 * 60 * 1000);
            const priority = (_c = options === null || options === void 0 ? void 0 : options.priority) !== null && _c !== void 0 ? _c : 1;
            const job = yield this._application._enqueueJob(key, { after, before, priority });
            this._log.info(`conversation enqueued: ${key} with internal id ${job.jobId}`, { jobKey: key });
            return { jobId: job.jobId };
        });
    }
    /**
     * Get current queue length at the server side.
     */
    length() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const api = new rest.DiagnosticsApi(this._application.account, this._log);
            const queueStates = yield api.getQueueStates();
            const queueState = queueStates.applicationGroups.find((x) => x.applicationName === this._application.applicationName &&
                x.groupId === this._application.groupId);
            return (_a = queueState === null || queueState === void 0 ? void 0 : queueState.length) !== null && _a !== void 0 ? _a : 0;
        });
    }
    /** @internal */
    _ignore(jobKey) {
        this._ignoredJobKeys.add(jobKey);
    }
}
exports.ConversationQueue = ConversationQueue;
class QueuedConversation extends eventemitter3_1.default {
    /** @internal */
    constructor(application, jobId, jobKey, log) {
        super();
        this.input = {};
        this.audio = audio._makeDefaultAudioConfig();
        this.sip = sip._makeDefaultSipConfig();
        /** @internal */ this._started = false;
        /** @internal */ this._timedOut = false;
        /** @internal */ this._rejected = false;
        /** @internal */ this._rejectedByUser = false;
        this._transcription = [];
        this._transcriptionParser = new transcription_1.TranscriptionParser();
        this._application = application;
        this._jobId = jobId;
        this._jobKey = jobKey;
        this.log = log.child({
            label: `conv:${this._jobId.slice(-6)}`,
            jobId,
            jobKey,
        });
        this.log.info(`jobId: ${this._jobId}`);
        this.log.info(`jobKey: ${this._jobKey}`);
        application._bindConversation(jobId, this);
        this._transcriptionParser.on("transcription", (transcription) => {
            this.emit("transcription", transcription);
            this._transcription.push(transcription);
        });
    }
    /**
     *  Explicitly mark this conversation as not being executed, freeing up server-side resources
     */
    ignore() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._started) {
                log_1.logAndThrow(this.log, new errors.Error("conversation has already been started"));
            }
            this.log.info(`Job ignored by user`);
            this._rejectedByUser = true;
            yield this._application._rejectJob(this._jobId);
        });
    }
    execute(options) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            if (this._timedOut) {
                log_1.logAndThrow(this.log, new errors.TimeoutError("conversation timed out"));
            }
            if (this._rejectedByUser) {
                log_1.logAndThrow(this.log, new errors.Error("conversation has already been ignored"));
            }
            if (this._rejected) {
                log_1.logAndThrow(this.log, this._rejectedReason);
            }
            if (this._started) {
                log_1.logAndThrow(this.log, new errors.Error("conversation has already been started"));
            }
            this._started = true;
            this.log.info("conversation started");
            let configName;
            let connection;
            if (this._application.connectionProvider !== undefined) {
                this.log.warn("connection providers are deprecated and will be removed in the future");
                connection = yield this._application._executeConnectionProvider(this);
                connection._sessionConfig.tts = yield this._application._executeTtsDispatcher(this);
                connection._sessionConfig.stt = yield this._application._executeSttDispatcher(this);
                configName = (yield this._application._addSessionConfig(connection._sessionConfig))
                    .configName;
            }
            else {
                const executionOptions = { channel: (_a = options === null || options === void 0 ? void 0 : options.channel) !== null && _a !== void 0 ? _a : "audio" };
                configName = (yield this._application._configureSession(this, executionOptions)).configName;
            }
            if ((_b = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _b === void 0 ? void 0 : _b.isCanceled) {
                yield this._application._rejectJob(this._jobId);
                options.cancelToken._throwIfCanceled(this.log);
            }
            connection === null || connection === void 0 ? void 0 : connection._init(this._jobId);
            yield this._application._acceptJob(this._jobId, {
                sessionConfigName: configName,
                data: this.input,
            });
            (_c = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _c === void 0 ? void 0 : _c._throwIfCanceled(this.log);
            return new Promise((resolve, reject) => {
                var _a;
                (_a = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _a === void 0 ? void 0 : _a._onCancel(this.log, reject);
                const unsubscribe = () => {
                    this._application.off("_jobFailed", handleJobFailed);
                    this._application.off("_jobCompleted", handleJobCompleted);
                    this._application.off("_jobRecordIdReady", handleJobRecordIdReady);
                    this._application.off("_jobEvent", handleJobEvent);
                };
                const handleJobFailed = (jobId, _jobKey, data) => {
                    if (jobId !== this._jobId)
                        return;
                    unsubscribe();
                    reject(log_1.logAndReturn(this.log, new errors.ConversationError(data)));
                };
                const handleJobCompleted = (jobId, _jobKey, data) => {
                    if (jobId !== this._jobId)
                        return;
                    unsubscribe();
                    this.log.info("conversation complete");
                    if (this._recordingUrl !== undefined) {
                        this.log.info(`recording available at ${this._recordingUrl}`);
                    }
                    resolve({
                        output: data,
                        transcription: this._transcription.sort((a, b) => +a.startTime - +b.startTime),
                        recordingUrl: this._recordingUrl,
                    });
                };
                const handleJobRecordIdReady = (jobId, recordId) => {
                    if (jobId !== this._jobId)
                        return;
                    this._recordingUrl = this._application._getRecordingUrl(recordId);
                };
                const handleJobEvent = (jobId, jobEvent) => {
                    if (jobId !== this._jobId)
                        return;
                    const isObject = (x) => typeof x === "object" && x !== null;
                    // a hack for https://gitlab.com/dasha.ai/platform-team/platform/-/issues/821
                    // TODO: a proper way to report #connect() errors to the application
                    if (isObject(jobEvent) && isObject(jobEvent.msg)) {
                        if (jobEvent.msg.msgId === "FailedOpenSessionChannelMessage") {
                            const logDetails = { msg: jobEvent.msg };
                            this.log.warn(`#connect() call failed: ${jobEvent.msg.reason}`, logDetails);
                            this.log.warn(`${jobEvent.msg.details}`, logDetails);
                        }
                    }
                    this.emit("debugLog", jobEvent);
                    this._transcriptionParser.push(jobEvent);
                };
                this._application.on("_jobFailed", handleJobFailed);
                this._application.on("_jobCompleted", handleJobCompleted);
                this._application.on("_jobRecordIdReady", handleJobRecordIdReady);
                this._application.on("_jobEvent", handleJobEvent);
            });
        });
    }
}
exports.QueuedConversation = QueuedConversation;
//# sourceMappingURL=queue.js.map