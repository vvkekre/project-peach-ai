import EventEmitter from "eventemitter3";
import * as errors from "./errors";
import { Account } from "./account";
import { Connection } from "./connection";
import { Conversation } from "./conversation";
/**
 * Connect the application to a {@link Chat} instance.
 *
 * @see ConnectionProvider
 *
 * @deprecated use the `channel` parameter to {@link Conversation.execute} instead
 */
export declare function connect(chat: Chat): Connection;
/**
 * Create a {@link Chat} instance to use with an application.
 *
 * @param account Dasha account to use. Must be the same as the application's account.
 *   If not set, uses the {@link getCurrentAccountName | current account}.
 *
 * @deprecated
 */
export declare function createChat(account?: Account): Promise<Chat>;
/**
 * Create a {@link Chat} instance to use with a conversation.
 *
 * @param conversation a conversation to connect to
 * @param options.account Dasha account to use. Must be the same as the application's account.
 *   If not set, uses the {@link getCurrentAccountName | current account}.
 */
export declare function createChat(conversation: Conversation, options?: {
    account?: Account;
}): Promise<Chat>;
/**
 * A text-based means of communication with an {@link Application}.
 */
export declare class Chat extends EventEmitter<{
    error: [error: errors.Error];
    text: [text: string];
    close: [];
}> {
    private _jobId;
    private _textProtocolClient;
    private _messageStream;
    /**
     * Create a {@link Chat} instance to use with an application.
     *
     * @param account Dasha account to use. Must be the same as the application's account.
     */
    constructor(account: Account, conversation?: Conversation);
    /**
     * Send some text to the application.
     */
    sendText(text: string): Promise<void>;
    /**
     * Close the chat, notifying the application.
     */
    close(): Promise<void>;
    private _handleText;
    private _handleClose;
}
/**
 * Create a {@link Chat} instance to use with an application.
 *
 * @param account Dasha account to use. Must be the same as the application's account.
 *   If not set, uses the {@link getCurrentAccountName | current account}.
 *
 * @deprecated
 */
export declare function createConsoleChat(account?: Account): Promise<Chat>;
/**
 * Create a {@link Chat} instance to use with a conversation.
 *
 * @param conversation a conversation to connect to
 * @param options.account Dasha account to use. Must be the same as the application's account.
 *   If not set, uses the {@link getCurrentAccountName | current account}.
 */
export declare function createConsoleChat(conversation: Conversation, options?: {
    account?: Account;
}): Promise<Chat>;
/**
 * A simple, console-based {@link Chat} wrapper for testing and debugging applications.
 * Only available in Node.js.
 */
export declare class ConsoleChat extends Chat {
    private _interface;
    constructor(account: Account, conversation?: Conversation);
}
