"use strict";
// TODO: docs on what a group actually is
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateGroup = exports.listGroups = exports.getGroupByName = exports.deleteGroup = exports.createGroup = void 0;
const account_1 = require("./account");
const log_1 = require("./log");
const rest = __importStar(require("./rest-api"));
function toGroupInfo(dto) {
    var _a, _b;
    return {
        id: dto.id,
        description: (_a = dto.description) !== null && _a !== void 0 ? _a : undefined,
        maxConcurrency: (_b = dto.maxConcurrency) !== null && _b !== void 0 ? _b : undefined,
        isDefault: dto.isDefaultGroup,
        isTemporary: dto.isTemporaryGroup || undefined,
    };
}
/**
 * Create a new application group.
 *
 * @param info.maxConcurrency maximum total number of concurrent conversation allowed
 *   for all applications in a group
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 *
 * @returns the properties of a newly-created group
 */
// TODO: what does info.maxConcurrency default to
function createGroup(name, info, options) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (yield account_1._getEffectiveAccount({ _log: log_1.log }));
        const log = log_1.log.child({ account: account_1.anonymizeAccount(account) });
        const api = new rest.GroupApi(account, log);
        const group = yield api.createGroup(Object.assign({ name }, info));
        return toGroupInfo(group);
    });
}
exports.createGroup = createGroup;
/**
 * Delete an application group from the platform.
 *
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 * @param options.quiet if true, does not throw if the group does not exist
*/
function deleteGroup(name, options) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (yield account_1._getEffectiveAccount({ _log: log_1.log }));
        const log = log_1.log.child({ account: account_1.anonymizeAccount(account) });
        const api = new rest.GroupApi(account, log);
        yield api.deleteGroup(name, options);
    });
}
exports.deleteGroup = deleteGroup;
/**
 * Get group properties by its name.
 *
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
*/
function getGroupByName(name, options) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (yield account_1._getEffectiveAccount({ _log: log_1.log }));
        const log = log_1.log.child({ account: account_1.anonymizeAccount(account) });
        const api = new rest.GroupApi(account, log);
        const group = yield api.getGroupByName(name);
        return toGroupInfo(group);
    });
}
exports.getGroupByName = getGroupByName;
/**
 * List all the groups available to an account.
 *
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 * @param options.includeTemporary whether to include temporary groups
 *   created by calling {@link deploy} without a group name.
 *
 * @returns a dictionary of {@link GroupInfo} objects by group name
*/
function listGroups(options) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (yield account_1._getEffectiveAccount({ _log: log_1.log }));
        const log = log_1.log.child({ account: account_1.anonymizeAccount(account) });
        const api = new rest.GroupApi(account, log);
        const groups = yield api.listGroups(options);
        return Object.fromEntries(groups.map((group) => [group.name, toGroupInfo(group)]));
    });
}
exports.listGroups = listGroups;
/**
 * Update some or all of the group's properties. Pass `null` to reset to default values.
 *
 * @param info.maxConcurrency maximum total number of concurrent conversation allowed
 *   for all applications in a group
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
*/
function updateGroup(name, info, options) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (yield account_1._getEffectiveAccount({ _log: log_1.log }));
        const log = log_1.log.child({ account: account_1.anonymizeAccount(account) });
        const api = new rest.GroupApi(account, log);
        const group = yield api.updateGroup(name, info);
        return toGroupInfo(group);
    });
}
exports.updateGroup = updateGroup;
//# sourceMappingURL=groups.js.map