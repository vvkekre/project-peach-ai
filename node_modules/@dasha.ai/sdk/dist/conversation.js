"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SingleConversation = void 0;
const eventemitter3_1 = __importDefault(require("eventemitter3"));
const uuid = __importStar(require("uuid"));
const audio = __importStar(require("./audio"));
const errors = __importStar(require("./errors"));
const sip = __importStar(require("./sip"));
const log_1 = require("./log");
const transcription_1 = require("./transcription");
/** @internal */
class SingleConversation extends eventemitter3_1.default {
    constructor(application, input, log) {
        super();
        this.input = {};
        this.audio = audio._makeDefaultAudioConfig();
        this.sip = sip._makeDefaultSipConfig();
        this._started = false;
        /** @internal */ this._jobKey = "__single_conversation:" + uuid.v4();
        this._transcriptionParser = new transcription_1.TranscriptionParser();
        this._transcription = [];
        this.log = log.child({
            label: `conv:${this._jobKey.slice(-6)}`,
            jobKey: this._jobKey,
        });
        this._application = application;
        if (input !== undefined)
            this.input = input;
        this._transcriptionParser.on("transcription", (transcription) => {
            this.emit("transcription", transcription);
            this._transcription.push(transcription);
        });
    }
    execute(options) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (this._started) {
                log_1.logAndThrow(this.log, new errors.Error("conversation has already been started"));
            }
            this._started = true;
            this.log.info("conversation starting");
            this.log.info(`jobKey: ${this._jobKey}`);
            this._application.queue._ignore(this._jobKey);
            let configName;
            let connection;
            if (this._application.connectionProvider !== undefined) {
                this.log.warn("connection providers are deprecated and will be removed in the future");
                connection = yield this._application._executeConnectionProvider(this);
                connection._sessionConfig.tts = yield this._application._executeTtsDispatcher(this);
                connection._sessionConfig.stt = yield this._application._executeSttDispatcher(this);
                configName = (yield this._application._addSessionConfig(connection._sessionConfig))
                    .configName;
            }
            else {
                const executionOptions = { channel: (_a = options === null || options === void 0 ? void 0 : options.channel) !== null && _a !== void 0 ? _a : "audio" };
                configName = (yield this._application._configureSession(this, executionOptions)).configName;
            }
            (_b = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _b === void 0 ? void 0 : _b._throwIfCanceled(this.log);
            return new Promise((resolve, reject) => {
                var _a;
                (_a = options === null || options === void 0 ? void 0 : options.cancelToken) === null || _a === void 0 ? void 0 : _a._onCancel(this.log, reject);
                const unsubscribe = () => {
                    this._application.off("_jobTimedOut", handleJobTimedOut);
                    this._application.off("_jobRejected", handleJobRejected);
                    this._application.off("_jobStarting", handleJobStarting);
                    this._application.off("_jobFailed", handleJobFailed);
                    this._application.off("_jobCompleted", handleJobCompleted);
                    this._application.off("_jobRecordIdReady", handleJobRecordIdReady);
                    this._application.off("_jobEvent", handleJobEvent);
                };
                const handleJobTimedOut = (jobId, jobKey) => {
                    if (jobKey !== this._jobKey)
                        return;
                    unsubscribe();
                    reject(log_1.logAndReturn(this.log, new errors.TimeoutError("conversation timed out")));
                };
                const handleJobRejected = (jobId, jobKey, data) => {
                    if (jobKey !== this._jobKey)
                        return;
                    unsubscribe();
                    reject(log_1.logAndReturn(this.log, new errors.ConversationRejectedError(data)));
                };
                const handleJobStarting = (jobId, jobKey) => {
                    if (jobKey !== this._jobKey)
                        return;
                    this._jobId = jobId;
                    this.log.info(`jobId: ${jobId}`);
                    this._application._bindConversation(jobId, this);
                    connection === null || connection === void 0 ? void 0 : connection._init(jobId);
                    this._application
                        ._acceptJob(jobId, { sessionConfigName: configName, data: this.input })
                        .then(() => {
                        this.log.info("conversation started");
                    })
                        .catch((error) => {
                        unsubscribe();
                        reject(error);
                    });
                };
                const handleJobFailed = (jobId, _jobKey, data) => {
                    if (jobId !== this._jobId)
                        return;
                    unsubscribe();
                    reject(log_1.logAndReturn(this.log, new errors.ConversationError(data)));
                };
                const handleJobCompleted = (jobId, _jobKey, data) => {
                    if (jobId !== this._jobId)
                        return;
                    unsubscribe();
                    this.log.info("conversation complete");
                    if (this._recordingUrl !== undefined) {
                        this.log.info(`recording available at ${this._recordingUrl}`);
                    }
                    resolve({
                        output: data,
                        transcription: this._transcription.sort((a, b) => +a.startTime - +b.startTime),
                        recordingUrl: this._recordingUrl,
                    });
                };
                const handleJobRecordIdReady = (jobId, recordId) => {
                    if (jobId !== this._jobId)
                        return;
                    this._recordingUrl = this._application._getRecordingUrl(recordId);
                };
                const handleJobEvent = (jobId, jobEvent) => {
                    if (jobId !== this._jobId)
                        return;
                    const isObject = (x) => typeof x === "object" && x !== null;
                    // a hack for https://gitlab.com/dasha.ai/platform-team/platform/-/issues/821
                    // TODO: a proper way to report #connect() errors to the application
                    if (isObject(jobEvent) && isObject(jobEvent.msg)) {
                        if (jobEvent.msg.msgId === "FailedOpenSessionChannelMessage") {
                            const logDetails = { msg: jobEvent.msg };
                            this.log.warn(`#connect() call failed: ${jobEvent.msg.reason}`, logDetails);
                            this.log.warn(`${jobEvent.msg.details}`, logDetails);
                        }
                    }
                    this.emit("debugLog", jobEvent);
                    this._transcriptionParser.push(jobEvent);
                };
                this._application.on("_jobTimedOut", handleJobTimedOut);
                this._application.on("_jobRejected", handleJobRejected);
                this._application.on("_jobStarting", handleJobStarting);
                this._application.on("_jobFailed", handleJobFailed);
                this._application.on("_jobCompleted", handleJobCompleted);
                this._application.on("_jobRecordIdReady", handleJobRecordIdReady);
                this._application.on("_jobEvent", handleJobEvent);
                this._application
                    ._enqueueJob(this._jobKey, {
                    priority: 1,
                    after: new Date(),
                    before: new Date(Date.now() + 5 * 60 * 1000),
                })
                    .then(({ jobId }) => (this._jobId = jobId), (error) => {
                    unsubscribe();
                    reject(error);
                });
            });
        });
    }
}
exports.SingleConversation = SingleConversation;
//# sourceMappingURL=conversation.js.map