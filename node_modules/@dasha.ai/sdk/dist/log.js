"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.disableSentryTransport = exports.enableSentryTransport = exports.logAndReturn = exports.logAndThrow = exports.log = void 0;
const proxy_from_env_1 = require("proxy-from-env");
const winston = __importStar(require("winston"));
const errors = __importStar(require("./errors"));
/**
 * A global logger instance.
 *
 * All logger instances are [winston] loggers.
 *
 * [winston]: https://npmjs.com/winston
 */
exports.log = winston.createLogger({
    level: process.env.DASHA_LOG_LEVEL || "info",
});
// https://github.com/winstonjs/logform/issues/100#issuecomment-744318235
exports.log.format = winston.format.errors({ stack: exports.log.isDebugEnabled() });
exports.log.add(new winston.transports.Console({
    format: winston.format.combine(winston.format.colorize(), winston.format.timestamp(), winston.format.printf(({ timestamp, label, level, message, stack }) => `${timestamp} [${label !== null && label !== void 0 ? label : "sdk"}] ${level} ${stack !== null && stack !== void 0 ? stack : message}`)),
}));
function logAndThrow(log, error) {
    log.error(error);
    throw error;
}
exports.logAndThrow = logAndThrow;
function logAndReturn(log, error) {
    log.error(error);
    return error;
}
exports.logAndReturn = logAndReturn;
function enableSentryTransport() {
    Promise.resolve().then(() => __importStar(require("winston-transport-sentry-node"))).catch(() => {
        logAndThrow(exports.log, new errors.OptionalDependencyNotFoundError("winston-transport-sentry-node"));
    })
        .then((module) => {
        const SentryTransport = module.default;
        if (exports.log.transports.some((t) => t instanceof SentryTransport)) {
            return;
        }
        const dsn = "https://d59ab8bd2df644049e9c0520fc79ca91@sentry.dev.az.dasha.ai/28";
        exports.log.add(new SentryTransport({
            level: "error",
            sentry: {
                dsn,
                httpsProxy: proxy_from_env_1.getProxyForUrl(dsn) || undefined,
            },
        }));
        exports.log.info("error reporting is enabled", { label: "sdk" });
    });
}
exports.enableSentryTransport = enableSentryTransport;
function disableSentryTransport() {
    Promise.resolve().then(() => __importStar(require("winston-transport-sentry-node"))).catch(() => {
        logAndThrow(exports.log, new errors.OptionalDependencyNotFoundError("winston-transport-sentry-node"));
    })
        .then((module) => {
        const SentryTransport = module.default;
        const transport = exports.log.transports.find((t) => t instanceof SentryTransport);
        if (transport === undefined)
            return;
        exports.log.remove(transport);
        exports.log.info("error reporting is disabled", { label: "sdk" });
    });
}
exports.disableSentryTransport = disableSentryTransport;
//# sourceMappingURL=log.js.map