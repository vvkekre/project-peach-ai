"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.synthesize = exports._makeTtsSessionConfig = void 0;
const account_1 = require("./account");
const log_1 = require("./log");
const rest = __importStar(require("./rest-api"));
function _toConfigName(providerName, log) {
    switch (providerName) {
        case "default":
            return "Default";
        case "custom":
            return "ExternalClient";
        case "dasha":
            return "Dasha";
        default:
            // fallback for providers not defined by the current SDK version
            log.warn(`unknown tts provider name: ${providerName}`);
            return providerName;
    }
}
/** @internal */
function _makeTtsSessionConfig(providerName, log) {
    return { type: "synthesized", configName: _toConfigName(providerName, log) };
}
exports._makeTtsSessionConfig = _makeTtsSessionConfig;
function synthesize(text, voice, options) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const account = (_a = options.account) !== null && _a !== void 0 ? _a : (yield account_1._getEffectiveAccount({ _log: log_1.log }));
        const log = log_1.log.child({ account: account_1.anonymizeAccount(account) });
        const api = new rest.TtsApi(account, log);
        const data = yield api.synthesize({
            text,
            voiceInfo: voice,
            configName: _toConfigName(options.providerName, log),
        });
        return data;
    });
}
exports.synthesize = synthesize;
//# sourceMappingURL=tts.js.map