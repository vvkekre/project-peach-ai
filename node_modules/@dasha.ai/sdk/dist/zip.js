"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.file = exports.directory = void 0;
const log_1 = require("./log");
const errors = __importStar(require("./errors"));
// the code here is written as if `archiver` was an optional dependency
// based on the assumption that we may want to work with pre-packed applications
// in the future
/** @internal */
function directory(path, log) {
    return __awaiter(this, void 0, void 0, function* () {
        const { default: archiver } = yield Promise.resolve().then(() => __importStar(require("archiver"))).catch(() => {
            log_1.logAndThrow(log, new errors.OptionalDependencyNotFoundError("archiver"));
        });
        return new Promise((resolve, reject) => {
            const zip = archiver("zip");
            const chunks = [];
            zip.on("error", (error) => reject(log_1.logAndReturn(log, new errors.FileSystemError(error))));
            zip.on("warning", (error) => reject(log_1.logAndReturn(log, new errors.FileSystemError(error))));
            zip.on("data", (chunk) => chunks.push(chunk));
            zip.on("finish", () => resolve(Buffer.concat(chunks)));
            zip.directory(path, false);
            zip.finalize().catch((error) => reject(log_1.logAndReturn(log, new errors.FileSystemError(error))));
        });
    });
}
exports.directory = directory;
/** @internal */
function file(name, content, log) {
    return __awaiter(this, void 0, void 0, function* () {
        const { default: archiver } = yield Promise.resolve().then(() => __importStar(require("archiver"))).catch(() => {
            log_1.logAndThrow(log, new errors.OptionalDependencyNotFoundError("archiver"));
        });
        return new Promise((resolve, reject) => {
            const zip = archiver("zip");
            const chunks = [];
            zip.on("error", (error) => reject(log_1.logAndReturn(log, new errors.FileSystemError(error))));
            zip.on("warning", (error) => reject(log_1.logAndReturn(log, new errors.FileSystemError(error))));
            zip.on("data", (chunk) => chunks.push(chunk));
            zip.on("finish", () => resolve(Buffer.concat(chunks)));
            zip.append(content, { name });
            zip.finalize().catch((error) => reject(log_1.logAndReturn(log, new errors.FileSystemError(error))));
        });
    });
}
exports.file = file;
//# sourceMappingURL=zip.js.map