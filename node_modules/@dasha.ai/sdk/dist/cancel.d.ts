import EventEmitter from "eventemitter3";
/**
 * A cancellation token loosely based on [the proposal](https://github.com/tc39/proposal-cancellation/blob/master/stage0/README.md).
 */
export declare class CancelToken extends EventEmitter<{}> {
    private _isCanceled;
    private _error;
    get isCanceled(): boolean;
    private _cancel;
    /**
     * Create a new cancellation token.
     *
     * The `executor` callback is called immediately by this constructor.
     * It gets passed the `cancel` callback, which should be called on a cancellation request.
     *
     * @example this token is cancelled after a second passes:
     * ```typescript
     * const token = new CancelToken((cancel) => setTimeout(cancel, 1000));
     * ```
     */
    constructor(executor: (cancel: () => void) => void);
    /**
     * Create a token that is automatically cancelled after `ms` milliseconds.
    */
    static cancelAfter(ms: number): CancelToken;
}
