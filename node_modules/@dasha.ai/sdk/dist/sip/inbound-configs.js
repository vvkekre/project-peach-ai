"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateConfig = exports.listConfigs = exports.createConfig = exports.deleteConfig = void 0;
const account_1 = require("../account");
const log_1 = require("../log");
const rest = __importStar(require("../rest-api"));
function toInboundConfig(dto, groupApi) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        return {
            ipAcls: (_a = dto.ipACLs) !== null && _a !== void 0 ? _a : undefined,
            applicationName: dto.applicationName,
            priority: dto.priority,
            groupName: dto.groupId ? (yield groupApi.getGroupById(dto.groupId)).name : undefined,
            uri: dto.uri,
        };
    });
}
/**
 * Delete an inbound SIP config from the Dasha platform.
 *
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 * @param options.quiet if true, does not throw if the config does not exist
 */
function deleteConfig(name, options) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (yield account_1._getEffectiveAccount({ _log: log_1.log }));
        const log = log_1.log.child({ account: account_1.anonymizeAccount(account) });
        const endpointApi = new rest.SipEndpointApi(account, log);
        yield endpointApi.deleteConfig(name, options);
    });
}
exports.deleteConfig = deleteConfig;
/**
 * Create a new inbound SIP config.
 *
 * @param config see {@link InboundConfig}
 * @param config.password SIP authentication password as per https://tools.ietf.org/html/rfc3261#section-22.3
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 *
 * @returns a newly-created config
 */
function createConfig(name, config, options) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (yield account_1._getEffectiveAccount({ _log: log_1.log }));
        const log = log_1.log.child({ account: account_1.anonymizeAccount(account) });
        const endpointApi = new rest.SipEndpointApi(account, log);
        const groupApi = new rest.GroupApi(account, log);
        const group = config.groupName ? yield groupApi.getGroupByName(config.groupName) : undefined;
        const newConfig = yield endpointApi.createConfig(Object.assign(Object.assign({}, config), { name, groupId: group === null || group === void 0 ? void 0 : group.id }));
        return yield toInboundConfig(newConfig, groupApi);
    });
}
exports.createConfig = createConfig;
/**
 * List all the inbound SIP configs available to an account.
 *
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 *
 * @returns a dictionary of {@link InboundConfig} objects by their names
 */
function listConfigs(options) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (yield account_1._getEffectiveAccount({ _log: log_1.log }));
        const log = log_1.log.child({ account: account_1.anonymizeAccount(account) });
        const endpointApi = new rest.SipEndpointApi(account, log);
        const groupApi = new rest.GroupApi(account, log);
        const configs = yield endpointApi.listConfigs();
        const entries = yield Promise.all(configs.map((config) => __awaiter(this, void 0, void 0, function* () { return [config.name, yield toInboundConfig(config, groupApi)]; })));
        return Object.fromEntries(entries);
    });
}
exports.listConfigs = listConfigs;
/**
 * Update an inbound SIP config. Pass `null` in the optional fields to reset to defaults.
 *
 * @param changes see {@link InboundConfig}
 * @param changes.password SIP authentication password as per https://tools.ietf.org/html/rfc3261#section-22.3
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 *
 * @returns an updated config
 */
function updateConfig(name, changes, options) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (yield account_1._getEffectiveAccount({ _log: log_1.log }));
        const log = log_1.log.child({ account: account_1.anonymizeAccount(account) });
        const endpointApi = new rest.SipEndpointApi(account, log);
        const groupApi = new rest.GroupApi(account, log);
        const group = changes.groupName ? yield groupApi.getGroupByName(changes.groupName) : undefined;
        const config = yield endpointApi.updateConfig(name, Object.assign(Object.assign({}, changes), { groupId: group === null || group === void 0 ? void 0 : group.id }));
        return yield toInboundConfig(config, groupApi);
    });
}
exports.updateConfig = updateConfig;
//# sourceMappingURL=inbound-configs.js.map