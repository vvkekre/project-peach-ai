"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._extractSipInfo = exports._makeDefaultSipConfig = exports.Endpoint = exports.connect = exports.SipConnection = exports.outboundConfigs = exports.inboundConfigs = void 0;
exports.inboundConfigs = __importStar(require("./inbound-configs"));
exports.outboundConfigs = __importStar(require("./outbound-configs"));
//#region deprecated: connections
/** @internal */
class SipConnection {
    /** @internal */
    constructor(sessionConfig) {
        this._sessionConfig = sessionConfig;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    /** @internal */ _init(jobId) {
        // sic
    }
}
exports.SipConnection = SipConnection;
/**
 * @deprecated use the `channel` argument to {@link Conversation.execute} instead
 */
function connect(endpoint) {
    return new SipConnection(endpoint._sessionConfig);
}
exports.connect = connect;
/**
 * @deprecated use {@link Conversation.sip} instead
*/
class Endpoint {
    constructor(name, options) {
        const defaultSessionConfig = {
            type: "audio",
            channel: {
                type: "sip",
                configName: name,
            },
            stt: {
                configName: "Default",
            },
            tts: {
                type: "synthesized",
                configName: "Default",
            },
            vad: { interlocutorPauseDelay: 0.8 },
            saveLog: true,
            noiseVolume: 0,
        };
        this._sessionConfig = Object.assign(Object.assign({}, defaultSessionConfig), options);
    }
}
exports.Endpoint = Endpoint;
/** @internal */
function _makeDefaultSipConfig() {
    return {
        config: "default",
    };
}
exports._makeDefaultSipConfig = _makeDefaultSipConfig;
/** @internal */
function _extractSipInfo(jobData) {
    const isObject = (x) => typeof x === "object" && x !== null;
    if (!isObject(jobData.Sip))
        return undefined;
    return {
        fromUser: String(jobData.Sip.FromUser),
        fromDomain: String(jobData.Sip.FromDomain),
        toUser: String(jobData.Sip.ToUser),
        toDomain: String(jobData.Sip.ToDomain),
        diversion: jobData.Sip.Diversion,
    };
}
exports._extractSipInfo = _extractSipInfo;
//# sourceMappingURL=index.js.map