import { Account } from "../account";
/**
 * Inbound SIP configuration.
 */
export interface InboundConfig {
    /**
     * The application name to use this config for.
     */
    applicationName: string;
    /**
     * The application group name to use this config for.
     * If not set, defaults to the {@link GroupInfo.isDefault | default group}.
     */
    groupName?: string;
    /**
     * A list of IPs and subnets in [CIDR notation].
     *
     * [CIDR notation]: https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation
     */
    ipAcls?: string[];
    /**
     * Execution priority; must be a non-negative integer.
     */
    priority: number;
    /**
     * An URI to make SIP calls to the application.
     */
    uri: string;
}
/**
 * Delete an inbound SIP config from the Dasha platform.
 *
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 * @param options.quiet if true, does not throw if the config does not exist
 */
export declare function deleteConfig(name: string, options?: {
    account?: Account;
    quiet?: boolean;
}): Promise<void>;
/**
 * Create a new inbound SIP config.
 *
 * @param config see {@link InboundConfig}
 * @param config.password SIP authentication password as per https://tools.ietf.org/html/rfc3261#section-22.3
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 *
 * @returns a newly-created config
 */
export declare function createConfig(name: string, config: {
    applicationName: string;
    groupName?: string;
    priority: number;
    ipAcls?: string[];
    password?: string;
}, options?: {
    account?: Account;
}): Promise<InboundConfig>;
/**
 * List all the inbound SIP configs available to an account.
 *
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 *
 * @returns a dictionary of {@link InboundConfig} objects by their names
 */
export declare function listConfigs(options?: {
    account?: Account;
}): Promise<{
    [name: string]: InboundConfig;
}>;
/**
 * Update an inbound SIP config. Pass `null` in the optional fields to reset to defaults.
 *
 * @param changes see {@link InboundConfig}
 * @param changes.password SIP authentication password as per https://tools.ietf.org/html/rfc3261#section-22.3
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 *
 * @returns an updated config
 */
export declare function updateConfig(name: string, changes: {
    ipAcls?: string[] | null;
    applicationName?: string;
    password?: string | null;
    priority?: number;
    groupName?: string | null;
}, options?: {
    account?: Account;
}): Promise<InboundConfig>;
