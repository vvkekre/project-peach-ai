import { Account } from "./account";
/**
 * Application group properties.
 */
export interface GroupInfo {
    /**
     * The group's GUID.
     */
    id: string;
    description?: string;
    /**
     * Maximum total number of concurrent conversation allowed or all applications in a group.
     */
    maxConcurrency?: number;
    /**
     * Whether the group is marked as default for an account.
     */
    isDefault: boolean;
    /**
     * Whether this is a temporary group created by calling {@link deploy} without a group name.
     */
    isTemporary?: boolean;
}
/**
 * Create a new application group.
 *
 * @param info.maxConcurrency maximum total number of concurrent conversation allowed
 *   for all applications in a group
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 *
 * @returns the properties of a newly-created group
 */
export declare function createGroup(name: string, info: {
    description?: string;
    maxConcurrency?: number;
}, options?: {
    account?: Account;
}): Promise<GroupInfo>;
/**
 * Delete an application group from the platform.
 *
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 * @param options.quiet if true, does not throw if the group does not exist
*/
export declare function deleteGroup(name: string, options?: {
    account?: Account;
    quiet?: boolean;
}): Promise<void>;
/**
 * Get group properties by its name.
 *
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
*/
export declare function getGroupByName(name: string, options?: {
    account?: Account;
}): Promise<GroupInfo>;
/**
 * List all the groups available to an account.
 *
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 * @param options.includeTemporary whether to include temporary groups
 *   created by calling {@link deploy} without a group name.
 *
 * @returns a dictionary of {@link GroupInfo} objects by group name
*/
export declare function listGroups(options?: {
    account?: Account;
    includeTemporary?: boolean;
}): Promise<{
    [name: string]: GroupInfo;
}>;
/**
 * Update some or all of the group's properties. Pass `null` to reset to default values.
 *
 * @param info.maxConcurrency maximum total number of concurrent conversation allowed
 *   for all applications in a group
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
*/
export declare function updateGroup(name: string, info: {
    description?: string | null;
    maxConcurrency?: number | null;
}, options?: {
    account?: Account;
}): Promise<GroupInfo>;
