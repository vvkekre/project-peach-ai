"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IncomingRequestManager = void 0;
const eventemitter3_1 = __importDefault(require("eventemitter3"));
const uuid = __importStar(require("uuid"));
// TODO: need audio client docs
/**
 * An object that manages the incoming conversation requests.
 *
 * @see {@link Application.incoming}
 *
 * It has a `request` event, with arguments being and `endpoint` string,
 * and an `additionalInfo` string.
 *
 * @example handling a simple incoming request
 * ```typescript
 * application.incoming.on("request", async (endpoint) => {
 *   const conversation = application.createConversation({ endpoint });
 *   await conversation.execute();
 * });
 * ```
 */
class IncomingRequestManager extends eventemitter3_1.default {
    /** @internal */
    constructor(application, log) {
        super();
        this._isDisposed = false;
        this._handleAudioClientInviteRequest = (audioClientId, additionalInfo) => {
            const roomId = uuid.v4();
            const endpoint = this._application._getAudioClientEndpoint(audioClientId, roomId);
            this.emit("request", endpoint, additionalInfo);
        };
        this._application = application;
        this._log = log;
        this._application.on("_audioClientInviteRequest", this._handleAudioClientInviteRequest);
    }
    /** @internal */
    _dispose() {
        if (this._isDisposed)
            return;
        this._isDisposed = true;
        this._application.off("_audioClientInviteRequest", this._handleAudioClientInviteRequest);
    }
}
exports.IncomingRequestManager = IncomingRequestManager;
//# sourceMappingURL=incoming.js.map