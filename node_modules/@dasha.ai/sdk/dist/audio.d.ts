import * as stt from "./stt";
import * as tts from "./tts";
import { Connection } from "./connection";
/**
 * Audio data. Primarily used by {@link CustomTtsProvider} callbacks and created by
 * {@link fromFile}, {@link fromBlob}, or {@link fromFetchResponse}.
 */
export declare class Audio {
}
/**
 * Creates an {@link Audio} object from a [Blob].
 *
 * [Blob]: https://developer.mozilla.org/en-US/docs/Web/API/Blob
 */
export declare function fromBlob(blob: Blob): Promise<Audio>;
/**
 * Creates an {@link Audio} object from a [Fetch API]'s [Response] object.
 * Note that {@link CustomTtsProvider} callbacks can directly return a Response.
 *
 * [Fetch API]: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
 * [Response]: https://developer.mozilla.org/en-US/docs/Web/API/Response
 */
export declare function fromFetchResponse(response: Response): Promise<Audio>;
/**
 * Creates an {@link Audio} object from a file on a local filesystem.
 * This function is only available in Node.js.
 *
 * @param format manually specify the file format;
 *   if not set, the format is guessed based on file extension
 */
export declare function fromFile(path: string, format?: "mp3" | "wav" | "pcm16"): Promise<Audio>;
/**
 * @deprecated use the `channel` argument to {@link Conversation.execute} instead
 */
export declare function connect(options?: {
    noiseVolume: number;
    [key: string]: unknown;
}): Connection;
export interface AudioConfig {
    /**
     * A text-to-speech provider to be used by the conversation.
     *
     * @default "default"
     */
    tts: tts.TtsProviderName;
    /**
     * A speech-to-text provider to be used by the conversation.
     *
     * @default "default"
     */
    stt: stt.SttProviderName;
    /**
     * Volume multiplier of the background noise applied to the AI audio track
     * relative to the audio track.
     *
     * Recommended value range is `0.1`-`0.3`.
     */
    noiseVolume?: number;
    /**
     * Delay in seconds between executing the #connect method and starting of Voice Activity Detector.
     *
     * It is necessary for the correct processing of the audio channel, due to the lack of data
     * in the beginning of the audio track.
     */
    vadStartupDelay?: number;
    /**
     * Length of expected pause in seconds at the end of human speech.
     *
     * Too big of a value will lead to long pauses before answer.
     * Too small of a value will lead to errors in speech recognition.
     */
    vadPauseDelay?: number;
    [key: string]: unknown;
}
