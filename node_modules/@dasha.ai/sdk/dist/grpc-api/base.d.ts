import EventEmitter from "eventemitter3";
import * as grpc from "@grpc/grpc-js";
import { Account } from "../account";
import { Logger } from "../log";
import * as errors from "../errors";
export declare class Stream<TEvents extends EventEmitter.ValidEventTypes, TGrpcStream extends grpc.ClientReadableStream<unknown> = grpc.ClientReadableStream<unknown>> extends EventEmitter<TEvents> {
    protected _grpcStream: TGrpcStream;
    constructor(init: (self: Stream<TEvents>) => TGrpcStream);
    cancel(): void;
}
export declare abstract class Client<TImpl extends grpc.Client> {
    protected log: Logger;
    protected grpcClient: TImpl;
    constructor(Client: new (...args: ConstructorParameters<typeof grpc.Client>) => TImpl, account: Account, log: Logger);
    close(): void;
    protected wrapGrpcError(error: grpc.ServiceError): errors.Error;
}
