// GENERATED CODE -- DO NOT EDIT!
'use strict';
var grpc = require('@grpc/grpc-js');
var call$gateway_pb = require('./call-gateway_pb.js');
function serialize_dasha_api_grpcapi_grpccallgateway_AudioBidirectionalStreamRequest(arg) {
    if (!(arg instanceof call$gateway_pb.AudioBidirectionalStreamRequest)) {
        throw new Error('Expected argument of type dasha.api.grpcapi.grpccallgateway.AudioBidirectionalStreamRequest');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_api_grpcapi_grpccallgateway_AudioBidirectionalStreamRequest(buffer_arg) {
    return call$gateway_pb.AudioBidirectionalStreamRequest.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_api_grpcapi_grpccallgateway_AudioSegment(arg) {
    if (!(arg instanceof call$gateway_pb.AudioSegment)) {
        throw new Error('Expected argument of type dasha.api.grpcapi.grpccallgateway.AudioSegment');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_api_grpcapi_grpccallgateway_AudioSegment(buffer_arg) {
    return call$gateway_pb.AudioSegment.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_api_grpcapi_grpccallgateway_AudioStreamRequest(arg) {
    if (!(arg instanceof call$gateway_pb.AudioStreamRequest)) {
        throw new Error('Expected argument of type dasha.api.grpcapi.grpccallgateway.AudioStreamRequest');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_api_grpcapi_grpccallgateway_AudioStreamRequest(buffer_arg) {
    return call$gateway_pb.AudioStreamRequest.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_api_grpcapi_grpccallgateway_AudioStreamResponse(arg) {
    if (!(arg instanceof call$gateway_pb.AudioStreamResponse)) {
        throw new Error('Expected argument of type dasha.api.grpcapi.grpccallgateway.AudioStreamResponse');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_api_grpcapi_grpccallgateway_AudioStreamResponse(buffer_arg) {
    return call$gateway_pb.AudioStreamResponse.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_api_grpcapi_grpccallgateway_ConnectMessage(arg) {
    if (!(arg instanceof call$gateway_pb.ConnectMessage)) {
        throw new Error('Expected argument of type dasha.api.grpcapi.grpccallgateway.ConnectMessage');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_api_grpcapi_grpccallgateway_ConnectMessage(buffer_arg) {
    return call$gateway_pb.ConnectMessage.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_api_grpcapi_grpccallgateway_ConnectionResponse(arg) {
    if (!(arg instanceof call$gateway_pb.ConnectionResponse)) {
        throw new Error('Expected argument of type dasha.api.grpcapi.grpccallgateway.ConnectionResponse');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_api_grpcapi_grpccallgateway_ConnectionResponse(buffer_arg) {
    return call$gateway_pb.ConnectionResponse.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_api_grpcapi_grpccallgateway_Empty(arg) {
    if (!(arg instanceof call$gateway_pb.Empty)) {
        throw new Error('Expected argument of type dasha.api.grpcapi.grpccallgateway.Empty');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_api_grpcapi_grpccallgateway_Empty(buffer_arg) {
    return call$gateway_pb.Empty.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_api_grpcapi_grpccallgateway_InviteRequestMessage(arg) {
    if (!(arg instanceof call$gateway_pb.InviteRequestMessage)) {
        throw new Error('Expected argument of type dasha.api.grpcapi.grpccallgateway.InviteRequestMessage');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_api_grpcapi_grpccallgateway_InviteRequestMessage(buffer_arg) {
    return call$gateway_pb.InviteRequestMessage.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_api_grpcapi_grpccallgateway_LeaveMessage(arg) {
    if (!(arg instanceof call$gateway_pb.LeaveMessage)) {
        throw new Error('Expected argument of type dasha.api.grpcapi.grpccallgateway.LeaveMessage');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_api_grpcapi_grpccallgateway_LeaveMessage(buffer_arg) {
    return call$gateway_pb.LeaveMessage.deserializeBinary(new Uint8Array(buffer_arg));
}
var AudioGatewayProtocolService = exports.AudioGatewayProtocolService = {
    connect: {
        path: '/dasha.api.grpcapi.grpccallgateway.AudioGatewayProtocol/Connect',
        requestStream: false,
        responseStream: true,
        requestType: call$gateway_pb.ConnectMessage,
        responseType: call$gateway_pb.ConnectionResponse,
        requestSerialize: serialize_dasha_api_grpcapi_grpccallgateway_ConnectMessage,
        requestDeserialize: deserialize_dasha_api_grpcapi_grpccallgateway_ConnectMessage,
        responseSerialize: serialize_dasha_api_grpcapi_grpccallgateway_ConnectionResponse,
        responseDeserialize: deserialize_dasha_api_grpcapi_grpccallgateway_ConnectionResponse,
    },
    inviteRequest: {
        path: '/dasha.api.grpcapi.grpccallgateway.AudioGatewayProtocol/InviteRequest',
        requestStream: false,
        responseStream: false,
        requestType: call$gateway_pb.InviteRequestMessage,
        responseType: call$gateway_pb.Empty,
        requestSerialize: serialize_dasha_api_grpcapi_grpccallgateway_InviteRequestMessage,
        requestDeserialize: deserialize_dasha_api_grpcapi_grpccallgateway_InviteRequestMessage,
        responseSerialize: serialize_dasha_api_grpcapi_grpccallgateway_Empty,
        responseDeserialize: deserialize_dasha_api_grpcapi_grpccallgateway_Empty,
    },
    leave: {
        path: '/dasha.api.grpcapi.grpccallgateway.AudioGatewayProtocol/Leave',
        requestStream: false,
        responseStream: false,
        requestType: call$gateway_pb.LeaveMessage,
        responseType: call$gateway_pb.Empty,
        requestSerialize: serialize_dasha_api_grpcapi_grpccallgateway_LeaveMessage,
        requestDeserialize: deserialize_dasha_api_grpcapi_grpccallgateway_LeaveMessage,
        responseSerialize: serialize_dasha_api_grpcapi_grpccallgateway_Empty,
        responseDeserialize: deserialize_dasha_api_grpcapi_grpccallgateway_Empty,
    },
};
exports.AudioGatewayProtocolClient = grpc.makeGenericClientConstructor(AudioGatewayProtocolService);
var AudioStreamProtocolService = exports.AudioStreamProtocolService = {
    audioStream: {
        path: '/dasha.api.grpcapi.grpccallgateway.AudioStreamProtocol/AudioStream',
        requestStream: false,
        responseStream: true,
        requestType: call$gateway_pb.AudioStreamRequest,
        responseType: call$gateway_pb.AudioStreamResponse,
        requestSerialize: serialize_dasha_api_grpcapi_grpccallgateway_AudioStreamRequest,
        requestDeserialize: deserialize_dasha_api_grpcapi_grpccallgateway_AudioStreamRequest,
        responseSerialize: serialize_dasha_api_grpcapi_grpccallgateway_AudioStreamResponse,
        responseDeserialize: deserialize_dasha_api_grpcapi_grpccallgateway_AudioStreamResponse,
    },
    sendAudio: {
        path: '/dasha.api.grpcapi.grpccallgateway.AudioStreamProtocol/SendAudio',
        requestStream: false,
        responseStream: false,
        requestType: call$gateway_pb.AudioSegment,
        responseType: call$gateway_pb.Empty,
        requestSerialize: serialize_dasha_api_grpcapi_grpccallgateway_AudioSegment,
        requestDeserialize: deserialize_dasha_api_grpcapi_grpccallgateway_AudioSegment,
        responseSerialize: serialize_dasha_api_grpcapi_grpccallgateway_Empty,
        responseDeserialize: deserialize_dasha_api_grpcapi_grpccallgateway_Empty,
    },
};
exports.AudioStreamProtocolClient = grpc.makeGenericClientConstructor(AudioStreamProtocolService);
var AudioBidirectionalStreamProtocolService = exports.AudioBidirectionalStreamProtocolService = {
    audioStream: {
        path: '/dasha.api.grpcapi.grpccallgateway.AudioBidirectionalStreamProtocol/AudioStream',
        requestStream: true,
        responseStream: true,
        requestType: call$gateway_pb.AudioBidirectionalStreamRequest,
        responseType: call$gateway_pb.AudioSegment,
        requestSerialize: serialize_dasha_api_grpcapi_grpccallgateway_AudioBidirectionalStreamRequest,
        requestDeserialize: deserialize_dasha_api_grpcapi_grpccallgateway_AudioBidirectionalStreamRequest,
        responseSerialize: serialize_dasha_api_grpcapi_grpccallgateway_AudioSegment,
        responseDeserialize: deserialize_dasha_api_grpcapi_grpccallgateway_AudioSegment,
    },
};
exports.AudioBidirectionalStreamProtocolClient = grpc.makeGenericClientConstructor(AudioBidirectionalStreamProtocolService);
//# sourceMappingURL=call-gateway_grpc_pb.js.map