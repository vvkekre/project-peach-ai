// GENERATED CODE -- DO NOT EDIT!
'use strict';
var grpc = require('@grpc/grpc-js');
var sdk_pb = require('./sdk_pb.js');
function serialize_dasha_sdk_AcceptJobMessage(arg) {
    if (!(arg instanceof sdk_pb.AcceptJobMessage)) {
        throw new Error('Expected argument of type dasha.sdk.AcceptJobMessage');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_AcceptJobMessage(buffer_arg) {
    return sdk_pb.AcceptJobMessage.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_AddSessionConfigRequest(arg) {
    if (!(arg instanceof sdk_pb.AddSessionConfigRequest)) {
        throw new Error('Expected argument of type dasha.sdk.AddSessionConfigRequest');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_AddSessionConfigRequest(buffer_arg) {
    return sdk_pb.AddSessionConfigRequest.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_AddSessionConfigResponse(arg) {
    if (!(arg instanceof sdk_pb.AddSessionConfigResponse)) {
        throw new Error('Expected argument of type dasha.sdk.AddSessionConfigResponse');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_AddSessionConfigResponse(buffer_arg) {
    return sdk_pb.AddSessionConfigResponse.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_AudioClientCloseRoomRequest(arg) {
    if (!(arg instanceof sdk_pb.AudioClientCloseRoomRequest)) {
        throw new Error('Expected argument of type dasha.sdk.AudioClientCloseRoomRequest');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_AudioClientCloseRoomRequest(buffer_arg) {
    return sdk_pb.AudioClientCloseRoomRequest.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_AudioClientConnectionMessage(arg) {
    if (!(arg instanceof sdk_pb.AudioClientConnectionMessage)) {
        throw new Error('Expected argument of type dasha.sdk.AudioClientConnectionMessage');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_AudioClientConnectionMessage(buffer_arg) {
    return sdk_pb.AudioClientConnectionMessage.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_AudioClientConnectionRequest(arg) {
    if (!(arg instanceof sdk_pb.AudioClientConnectionRequest)) {
        throw new Error('Expected argument of type dasha.sdk.AudioClientConnectionRequest');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_AudioClientConnectionRequest(buffer_arg) {
    return sdk_pb.AudioClientConnectionRequest.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_AudioClientInviteRequest(arg) {
    if (!(arg instanceof sdk_pb.AudioClientInviteRequest)) {
        throw new Error('Expected argument of type dasha.sdk.AudioClientInviteRequest');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_AudioClientInviteRequest(buffer_arg) {
    return sdk_pb.AudioClientInviteRequest.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_AudioClientKickRequest(arg) {
    if (!(arg instanceof sdk_pb.AudioClientKickRequest)) {
        throw new Error('Expected argument of type dasha.sdk.AudioClientKickRequest');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_AudioClientKickRequest(buffer_arg) {
    return sdk_pb.AudioClientKickRequest.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_AudioClientMessage(arg) {
    if (!(arg instanceof sdk_pb.AudioClientMessage)) {
        throw new Error('Expected argument of type dasha.sdk.AudioClientMessage');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_AudioClientMessage(buffer_arg) {
    return sdk_pb.AudioClientMessage.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_AudioClientStreamRequest(arg) {
    if (!(arg instanceof sdk_pb.AudioClientStreamRequest)) {
        throw new Error('Expected argument of type dasha.sdk.AudioClientStreamRequest');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_AudioClientStreamRequest(buffer_arg) {
    return sdk_pb.AudioClientStreamRequest.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_ClientStreamMessage(arg) {
    if (!(arg instanceof sdk_pb.ClientStreamMessage)) {
        throw new Error('Expected argument of type dasha.sdk.ClientStreamMessage');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_ClientStreamMessage(buffer_arg) {
    return sdk_pb.ClientStreamMessage.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_DiagnosticJobRequest(arg) {
    if (!(arg instanceof sdk_pb.DiagnosticJobRequest)) {
        throw new Error('Expected argument of type dasha.sdk.DiagnosticJobRequest');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_DiagnosticJobRequest(buffer_arg) {
    return sdk_pb.DiagnosticJobRequest.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_DiagnosticJobResponse(arg) {
    if (!(arg instanceof sdk_pb.DiagnosticJobResponse)) {
        throw new Error('Expected argument of type dasha.sdk.DiagnosticJobResponse');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_DiagnosticJobResponse(buffer_arg) {
    return sdk_pb.DiagnosticJobResponse.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_DiagnosticLimitsRequest(arg) {
    if (!(arg instanceof sdk_pb.DiagnosticLimitsRequest)) {
        throw new Error('Expected argument of type dasha.sdk.DiagnosticLimitsRequest');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_DiagnosticLimitsRequest(buffer_arg) {
    return sdk_pb.DiagnosticLimitsRequest.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_DiagnosticLimitsResponse(arg) {
    if (!(arg instanceof sdk_pb.DiagnosticLimitsResponse)) {
        throw new Error('Expected argument of type dasha.sdk.DiagnosticLimitsResponse');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_DiagnosticLimitsResponse(buffer_arg) {
    return sdk_pb.DiagnosticLimitsResponse.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_DiagnosticQueueRequest(arg) {
    if (!(arg instanceof sdk_pb.DiagnosticQueueRequest)) {
        throw new Error('Expected argument of type dasha.sdk.DiagnosticQueueRequest');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_DiagnosticQueueRequest(buffer_arg) {
    return sdk_pb.DiagnosticQueueRequest.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_DiagnosticQueuesResponse(arg) {
    if (!(arg instanceof sdk_pb.DiagnosticQueuesResponse)) {
        throw new Error('Expected argument of type dasha.sdk.DiagnosticQueuesResponse');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_DiagnosticQueuesResponse(buffer_arg) {
    return sdk_pb.DiagnosticQueuesResponse.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_Empty(arg) {
    if (!(arg instanceof sdk_pb.Empty)) {
        throw new Error('Expected argument of type dasha.sdk.Empty');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_Empty(buffer_arg) {
    return sdk_pb.Empty.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_EnqueueJobRequest(arg) {
    if (!(arg instanceof sdk_pb.EnqueueJobRequest)) {
        throw new Error('Expected argument of type dasha.sdk.EnqueueJobRequest');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_EnqueueJobRequest(buffer_arg) {
    return sdk_pb.EnqueueJobRequest.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_EnqueueJobResponseArray(arg) {
    if (!(arg instanceof sdk_pb.EnqueueJobResponseArray)) {
        throw new Error('Expected argument of type dasha.sdk.EnqueueJobResponseArray');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_EnqueueJobResponseArray(buffer_arg) {
    return sdk_pb.EnqueueJobResponseArray.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_InstanceConcurrencySetRequest(arg) {
    if (!(arg instanceof sdk_pb.InstanceConcurrencySetRequest)) {
        throw new Error('Expected argument of type dasha.sdk.InstanceConcurrencySetRequest');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_InstanceConcurrencySetRequest(buffer_arg) {
    return sdk_pb.InstanceConcurrencySetRequest.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_InstanceConcurrencySetResponse(arg) {
    if (!(arg instanceof sdk_pb.InstanceConcurrencySetResponse)) {
        throw new Error('Expected argument of type dasha.sdk.InstanceConcurrencySetResponse');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_InstanceConcurrencySetResponse(buffer_arg) {
    return sdk_pb.InstanceConcurrencySetResponse.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_InstanceEvent(arg) {
    if (!(arg instanceof sdk_pb.InstanceEvent)) {
        throw new Error('Expected argument of type dasha.sdk.InstanceEvent');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_InstanceEvent(buffer_arg) {
    return sdk_pb.InstanceEvent.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_JobNotification(arg) {
    if (!(arg instanceof sdk_pb.JobNotification)) {
        throw new Error('Expected argument of type dasha.sdk.JobNotification');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_JobNotification(buffer_arg) {
    return sdk_pb.JobNotification.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_RegisterRequest(arg) {
    if (!(arg instanceof sdk_pb.RegisterRequest)) {
        throw new Error('Expected argument of type dasha.sdk.RegisterRequest');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_RegisterRequest(buffer_arg) {
    return sdk_pb.RegisterRequest.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_RegisterResponse(arg) {
    if (!(arg instanceof sdk_pb.RegisterResponse)) {
        throw new Error('Expected argument of type dasha.sdk.RegisterResponse');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_RegisterResponse(buffer_arg) {
    return sdk_pb.RegisterResponse.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_RejectJobMessage(arg) {
    if (!(arg instanceof sdk_pb.RejectJobMessage)) {
        throw new Error('Expected argument of type dasha.sdk.RejectJobMessage');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_RejectJobMessage(buffer_arg) {
    return sdk_pb.RejectJobMessage.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_StreamInit(arg) {
    if (!(arg instanceof sdk_pb.StreamInit)) {
        throw new Error('Expected argument of type dasha.sdk.StreamInit');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_StreamInit(buffer_arg) {
    return sdk_pb.StreamInit.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_StreamMessage(arg) {
    if (!(arg instanceof sdk_pb.StreamMessage)) {
        throw new Error('Expected argument of type dasha.sdk.StreamMessage');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_StreamMessage(buffer_arg) {
    return sdk_pb.StreamMessage.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_TextProtocolMessage(arg) {
    if (!(arg instanceof sdk_pb.TextProtocolMessage)) {
        throw new Error('Expected argument of type dasha.sdk.TextProtocolMessage');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_TextProtocolMessage(buffer_arg) {
    return sdk_pb.TextProtocolMessage.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_TextProtocolStreamInit(arg) {
    if (!(arg instanceof sdk_pb.TextProtocolStreamInit)) {
        throw new Error('Expected argument of type dasha.sdk.TextProtocolStreamInit');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_TextProtocolStreamInit(buffer_arg) {
    return sdk_pb.TextProtocolStreamInit.deserializeBinary(new Uint8Array(buffer_arg));
}
var ProcessingService = exports.ProcessingService = {
    register: {
        path: '/dasha.sdk.Processing/Register',
        requestStream: false,
        responseStream: false,
        requestType: sdk_pb.RegisterRequest,
        responseType: sdk_pb.RegisterResponse,
        requestSerialize: serialize_dasha_sdk_RegisterRequest,
        requestDeserialize: deserialize_dasha_sdk_RegisterRequest,
        responseSerialize: serialize_dasha_sdk_RegisterResponse,
        responseDeserialize: deserialize_dasha_sdk_RegisterResponse,
    },
    // deprecated in favor of RegisterInstanceStream
    registerInstanceStream: {
        path: '/dasha.sdk.Processing/RegisterInstanceStream',
        requestStream: false,
        responseStream: true,
        requestType: sdk_pb.RegisterRequest,
        responseType: sdk_pb.InstanceEvent,
        requestSerialize: serialize_dasha_sdk_RegisterRequest,
        requestDeserialize: deserialize_dasha_sdk_RegisterRequest,
        responseSerialize: serialize_dasha_sdk_InstanceEvent,
        responseDeserialize: deserialize_dasha_sdk_InstanceEvent,
    },
    addSessionConfig: {
        path: '/dasha.sdk.Processing/AddSessionConfig',
        requestStream: false,
        responseStream: false,
        requestType: sdk_pb.AddSessionConfigRequest,
        responseType: sdk_pb.AddSessionConfigResponse,
        requestSerialize: serialize_dasha_sdk_AddSessionConfigRequest,
        requestDeserialize: deserialize_dasha_sdk_AddSessionConfigRequest,
        responseSerialize: serialize_dasha_sdk_AddSessionConfigResponse,
        responseDeserialize: deserialize_dasha_sdk_AddSessionConfigResponse,
    },
    runtimeStream: {
        path: '/dasha.sdk.Processing/RuntimeStream',
        requestStream: false,
        responseStream: true,
        requestType: sdk_pb.StreamInit,
        responseType: sdk_pb.StreamMessage,
        requestSerialize: serialize_dasha_sdk_StreamInit,
        requestDeserialize: deserialize_dasha_sdk_StreamInit,
        responseSerialize: serialize_dasha_sdk_StreamMessage,
        responseDeserialize: deserialize_dasha_sdk_StreamMessage,
    },
    debugStream: {
        path: '/dasha.sdk.Processing/DebugStream',
        requestStream: false,
        responseStream: true,
        requestType: sdk_pb.StreamInit,
        responseType: sdk_pb.StreamMessage,
        requestSerialize: serialize_dasha_sdk_StreamInit,
        requestDeserialize: deserialize_dasha_sdk_StreamInit,
        responseSerialize: serialize_dasha_sdk_StreamMessage,
        responseDeserialize: deserialize_dasha_sdk_StreamMessage,
    },
    jobStatusStream: {
        path: '/dasha.sdk.Processing/JobStatusStream',
        requestStream: false,
        responseStream: true,
        requestType: sdk_pb.StreamInit,
        responseType: sdk_pb.JobNotification,
        requestSerialize: serialize_dasha_sdk_StreamInit,
        requestDeserialize: deserialize_dasha_sdk_StreamInit,
        responseSerialize: serialize_dasha_sdk_JobNotification,
        responseDeserialize: deserialize_dasha_sdk_JobNotification,
    },
    // deprecated in favor of RegisterInstanceStream
    acceptJob: {
        path: '/dasha.sdk.Processing/AcceptJob',
        requestStream: false,
        responseStream: false,
        requestType: sdk_pb.AcceptJobMessage,
        responseType: sdk_pb.Empty,
        requestSerialize: serialize_dasha_sdk_AcceptJobMessage,
        requestDeserialize: deserialize_dasha_sdk_AcceptJobMessage,
        responseSerialize: serialize_dasha_sdk_Empty,
        responseDeserialize: deserialize_dasha_sdk_Empty,
    },
    rejectJob: {
        path: '/dasha.sdk.Processing/RejectJob',
        requestStream: false,
        responseStream: false,
        requestType: sdk_pb.RejectJobMessage,
        responseType: sdk_pb.Empty,
        requestSerialize: serialize_dasha_sdk_RejectJobMessage,
        requestDeserialize: deserialize_dasha_sdk_RejectJobMessage,
        responseSerialize: serialize_dasha_sdk_Empty,
        responseDeserialize: deserialize_dasha_sdk_Empty,
    },
    enqueueJob: {
        path: '/dasha.sdk.Processing/EnqueueJob',
        requestStream: false,
        responseStream: false,
        requestType: sdk_pb.EnqueueJobRequest,
        responseType: sdk_pb.EnqueueJobResponseArray,
        requestSerialize: serialize_dasha_sdk_EnqueueJobRequest,
        requestDeserialize: deserialize_dasha_sdk_EnqueueJobRequest,
        responseSerialize: serialize_dasha_sdk_EnqueueJobResponseArray,
        responseDeserialize: deserialize_dasha_sdk_EnqueueJobResponseArray,
    },
    sendRuntimeMessage: {
        path: '/dasha.sdk.Processing/SendRuntimeMessage',
        requestStream: false,
        responseStream: false,
        requestType: sdk_pb.ClientStreamMessage,
        responseType: sdk_pb.Empty,
        requestSerialize: serialize_dasha_sdk_ClientStreamMessage,
        requestDeserialize: deserialize_dasha_sdk_ClientStreamMessage,
        responseSerialize: serialize_dasha_sdk_Empty,
        responseDeserialize: deserialize_dasha_sdk_Empty,
    },
    sendDebugMessage: {
        path: '/dasha.sdk.Processing/SendDebugMessage',
        requestStream: false,
        responseStream: false,
        requestType: sdk_pb.ClientStreamMessage,
        responseType: sdk_pb.Empty,
        requestSerialize: serialize_dasha_sdk_ClientStreamMessage,
        requestDeserialize: deserialize_dasha_sdk_ClientStreamMessage,
        responseSerialize: serialize_dasha_sdk_Empty,
        responseDeserialize: deserialize_dasha_sdk_Empty,
    },
    getJobInformation: {
        path: '/dasha.sdk.Processing/GetJobInformation',
        requestStream: false,
        responseStream: false,
        requestType: sdk_pb.DiagnosticJobRequest,
        responseType: sdk_pb.DiagnosticJobResponse,
        requestSerialize: serialize_dasha_sdk_DiagnosticJobRequest,
        requestDeserialize: deserialize_dasha_sdk_DiagnosticJobRequest,
        responseSerialize: serialize_dasha_sdk_DiagnosticJobResponse,
        responseDeserialize: deserialize_dasha_sdk_DiagnosticJobResponse,
    },
    getLimitsInformation: {
        path: '/dasha.sdk.Processing/GetLimitsInformation',
        requestStream: false,
        responseStream: false,
        requestType: sdk_pb.DiagnosticLimitsRequest,
        responseType: sdk_pb.DiagnosticLimitsResponse,
        requestSerialize: serialize_dasha_sdk_DiagnosticLimitsRequest,
        requestDeserialize: deserialize_dasha_sdk_DiagnosticLimitsRequest,
        responseSerialize: serialize_dasha_sdk_DiagnosticLimitsResponse,
        responseDeserialize: deserialize_dasha_sdk_DiagnosticLimitsResponse,
    },
    getQueuesInformation: {
        path: '/dasha.sdk.Processing/GetQueuesInformation',
        requestStream: false,
        responseStream: false,
        requestType: sdk_pb.DiagnosticQueueRequest,
        responseType: sdk_pb.DiagnosticQueuesResponse,
        requestSerialize: serialize_dasha_sdk_DiagnosticQueueRequest,
        requestDeserialize: deserialize_dasha_sdk_DiagnosticQueueRequest,
        responseSerialize: serialize_dasha_sdk_DiagnosticQueuesResponse,
        responseDeserialize: deserialize_dasha_sdk_DiagnosticQueuesResponse,
    },
    setInstanceConcurrency: {
        path: '/dasha.sdk.Processing/SetInstanceConcurrency',
        requestStream: false,
        responseStream: false,
        requestType: sdk_pb.InstanceConcurrencySetRequest,
        responseType: sdk_pb.InstanceConcurrencySetResponse,
        requestSerialize: serialize_dasha_sdk_InstanceConcurrencySetRequest,
        requestDeserialize: deserialize_dasha_sdk_InstanceConcurrencySetRequest,
        responseSerialize: serialize_dasha_sdk_InstanceConcurrencySetResponse,
        responseDeserialize: deserialize_dasha_sdk_InstanceConcurrencySetResponse,
    },
    audioClientStateStream: {
        path: '/dasha.sdk.Processing/AudioClientStateStream',
        requestStream: false,
        responseStream: true,
        requestType: sdk_pb.AudioClientConnectionRequest,
        responseType: sdk_pb.AudioClientMessage,
        requestSerialize: serialize_dasha_sdk_AudioClientConnectionRequest,
        requestDeserialize: deserialize_dasha_sdk_AudioClientConnectionRequest,
        responseSerialize: serialize_dasha_sdk_AudioClientMessage,
        responseDeserialize: deserialize_dasha_sdk_AudioClientMessage,
    },
    listenForAudioClients: {
        path: '/dasha.sdk.Processing/ListenForAudioClients',
        requestStream: false,
        responseStream: true,
        requestType: sdk_pb.AudioClientStreamRequest,
        responseType: sdk_pb.AudioClientConnectionMessage,
        requestSerialize: serialize_dasha_sdk_AudioClientStreamRequest,
        requestDeserialize: deserialize_dasha_sdk_AudioClientStreamRequest,
        responseSerialize: serialize_dasha_sdk_AudioClientConnectionMessage,
        responseDeserialize: deserialize_dasha_sdk_AudioClientConnectionMessage,
    },
    audioClientKick: {
        path: '/dasha.sdk.Processing/AudioClientKick',
        requestStream: false,
        responseStream: false,
        requestType: sdk_pb.AudioClientKickRequest,
        responseType: sdk_pb.Empty,
        requestSerialize: serialize_dasha_sdk_AudioClientKickRequest,
        requestDeserialize: deserialize_dasha_sdk_AudioClientKickRequest,
        responseSerialize: serialize_dasha_sdk_Empty,
        responseDeserialize: deserialize_dasha_sdk_Empty,
    },
    audioClientInvite: {
        path: '/dasha.sdk.Processing/AudioClientInvite',
        requestStream: false,
        responseStream: false,
        requestType: sdk_pb.AudioClientInviteRequest,
        responseType: sdk_pb.Empty,
        requestSerialize: serialize_dasha_sdk_AudioClientInviteRequest,
        requestDeserialize: deserialize_dasha_sdk_AudioClientInviteRequest,
        responseSerialize: serialize_dasha_sdk_Empty,
        responseDeserialize: deserialize_dasha_sdk_Empty,
    },
    audioClientCloseRoom: {
        path: '/dasha.sdk.Processing/AudioClientCloseRoom',
        requestStream: false,
        responseStream: false,
        requestType: sdk_pb.AudioClientCloseRoomRequest,
        responseType: sdk_pb.Empty,
        requestSerialize: serialize_dasha_sdk_AudioClientCloseRoomRequest,
        requestDeserialize: deserialize_dasha_sdk_AudioClientCloseRoomRequest,
        responseSerialize: serialize_dasha_sdk_Empty,
        responseDeserialize: deserialize_dasha_sdk_Empty,
    },
};
exports.ProcessingClient = grpc.makeGenericClientConstructor(ProcessingService);
var TextProtocolService = exports.TextProtocolService = {
    sendMessage: {
        path: '/dasha.sdk.TextProtocol/SendMessage',
        requestStream: false,
        responseStream: false,
        requestType: sdk_pb.TextProtocolMessage,
        responseType: sdk_pb.Empty,
        requestSerialize: serialize_dasha_sdk_TextProtocolMessage,
        requestDeserialize: deserialize_dasha_sdk_TextProtocolMessage,
        responseSerialize: serialize_dasha_sdk_Empty,
        responseDeserialize: deserialize_dasha_sdk_Empty,
    },
    messageStream: {
        path: '/dasha.sdk.TextProtocol/MessageStream',
        requestStream: false,
        responseStream: true,
        requestType: sdk_pb.TextProtocolStreamInit,
        responseType: sdk_pb.TextProtocolMessage,
        requestSerialize: serialize_dasha_sdk_TextProtocolStreamInit,
        requestDeserialize: deserialize_dasha_sdk_TextProtocolStreamInit,
        responseSerialize: serialize_dasha_sdk_TextProtocolMessage,
        responseDeserialize: deserialize_dasha_sdk_TextProtocolMessage,
    },
};
exports.TextProtocolClient = grpc.makeGenericClientConstructor(TextProtocolService);
//# sourceMappingURL=sdk_grpc_pb.js.map