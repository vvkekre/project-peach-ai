// GENERATED CODE -- DO NOT EDIT!
'use strict';
var grpc = require('@grpc/grpc-js');
var nlu$service_pb = require('./nlu-service_pb.js');
function serialize_dasha_sdk_NluServiceInitializeRequest(arg) {
    if (!(arg instanceof nlu$service_pb.NluServiceInitializeRequest)) {
        throw new Error('Expected argument of type dasha.sdk.NluServiceInitializeRequest');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_NluServiceInitializeRequest(buffer_arg) {
    return nlu$service_pb.NluServiceInitializeRequest.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_NluServiceStatusStream(arg) {
    if (!(arg instanceof nlu$service_pb.NluServiceStatusStream)) {
        throw new Error('Expected argument of type dasha.sdk.NluServiceStatusStream');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_NluServiceStatusStream(buffer_arg) {
    return nlu$service_pb.NluServiceStatusStream.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_TextNluServiceRecognitionResponse(arg) {
    if (!(arg instanceof nlu$service_pb.TextNluServiceRecognitionResponse)) {
        throw new Error('Expected argument of type dasha.sdk.TextNluServiceRecognitionResponse');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_TextNluServiceRecognitionResponse(buffer_arg) {
    return nlu$service_pb.TextNluServiceRecognitionResponse.deserializeBinary(new Uint8Array(buffer_arg));
}
function serialize_dasha_sdk_TextNluServiceRequest(arg) {
    if (!(arg instanceof nlu$service_pb.TextNluServiceRequest)) {
        throw new Error('Expected argument of type dasha.sdk.TextNluServiceRequest');
    }
    return Buffer.from(arg.serializeBinary());
}
function deserialize_dasha_sdk_TextNluServiceRequest(buffer_arg) {
    return nlu$service_pb.TextNluServiceRequest.deserializeBinary(new Uint8Array(buffer_arg));
}
var NluServiceService = exports.NluServiceService = {
    initialize: {
        path: '/dasha.sdk.NluService/Initialize',
        requestStream: false,
        responseStream: true,
        requestType: nlu$service_pb.NluServiceInitializeRequest,
        responseType: nlu$service_pb.NluServiceStatusStream,
        requestSerialize: serialize_dasha_sdk_NluServiceInitializeRequest,
        requestDeserialize: deserialize_dasha_sdk_NluServiceInitializeRequest,
        responseSerialize: serialize_dasha_sdk_NluServiceStatusStream,
        responseDeserialize: deserialize_dasha_sdk_NluServiceStatusStream,
    },
    recognize: {
        path: '/dasha.sdk.NluService/Recognize',
        requestStream: false,
        responseStream: false,
        requestType: nlu$service_pb.TextNluServiceRequest,
        responseType: nlu$service_pb.TextNluServiceRecognitionResponse,
        requestSerialize: serialize_dasha_sdk_TextNluServiceRequest,
        requestDeserialize: deserialize_dasha_sdk_TextNluServiceRequest,
        responseSerialize: serialize_dasha_sdk_TextNluServiceRecognitionResponse,
        responseDeserialize: deserialize_dasha_sdk_TextNluServiceRecognitionResponse,
    },
};
exports.NluServiceClient = grpc.makeGenericClientConstructor(NluServiceService);
//# sourceMappingURL=nlu-service_grpc_pb.js.map