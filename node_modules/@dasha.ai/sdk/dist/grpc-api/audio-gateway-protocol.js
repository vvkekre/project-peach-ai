"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioGatewayProtocolClient = exports.TerminationReason = void 0;
const base = __importStar(require("./base"));
const services = __importStar(require("./generated/call-gateway_grpc_pb"));
const messages = __importStar(require("./generated/call-gateway_pb"));
var TerminationReason;
(function (TerminationReason) {
    TerminationReason[TerminationReason["DISCONNECTED"] = 0] = "DISCONNECTED";
    TerminationReason[TerminationReason["NOT_FOUND"] = 1] = "NOT_FOUND";
    TerminationReason[TerminationReason["FORBIDDEN"] = 2] = "FORBIDDEN";
})(TerminationReason = exports.TerminationReason || (exports.TerminationReason = {}));
class AudioGatewayProtocolClient extends base.Client {
    constructor(account, log) {
        super(services.AudioGatewayProtocolClient, account, log);
    }
    connect(request) {
        return new base.Stream((stream) => {
            const grpcRequest = new messages.ConnectMessage();
            grpcRequest.setAdditionalInfo(request.additionalInfo);
            const grpcStream = this.grpcClient.connect(grpcRequest);
            grpcStream.on("error", (grpcError) => {
                stream.emit("error", this.wrapGrpcError(grpcError));
                stream.cancel();
            });
            grpcStream.on("end", () => {
                stream.removeAllListeners();
            });
            grpcStream.on("data", (grpcMessage) => {
                const { connected, invite, roomEvent, terminate } = grpcMessage.toObject();
                if (connected !== undefined) {
                    stream.emit("connect", connected.audioClientId);
                }
                if (invite !== undefined) {
                    stream.emit("invite", invite.roomId, invite.additionalInfo);
                }
                if ((roomEvent === null || roomEvent === void 0 ? void 0 : roomEvent.type) === messages.RoomEventMessage.Type.JOINED) {
                    stream.emit("join", roomEvent.roomId, roomEvent.audioClientId);
                }
                if ((roomEvent === null || roomEvent === void 0 ? void 0 : roomEvent.type) === messages.RoomEventMessage.Type.LEFT) {
                    stream.emit("leave", roomEvent.roomId, roomEvent.audioClientId);
                }
                if (terminate !== undefined) {
                    stream.emit("terminate", terminate.roomId, terminate.reason, terminate.details);
                }
            });
            return grpcStream;
        });
    }
    inviteRequest(request) {
        return new Promise((resolve, reject) => {
            const { roomId, additionalInfo } = request;
            const grpcRequest = new messages.InviteRequestMessage();
            grpcRequest.setRoomId(roomId);
            grpcRequest.setAdditionalInfo(additionalInfo);
            this.grpcClient.inviteRequest(grpcRequest, (grpcError) => {
                if (grpcError) {
                    reject(this.wrapGrpcError(grpcError));
                    return;
                }
                resolve();
            });
        });
    }
    leave(request) {
        return new Promise((resolve, reject) => {
            const { roomId, additionalInfo } = request;
            const grpcRequest = new messages.LeaveMessage();
            grpcRequest.setRoomId(roomId);
            grpcRequest.setAdditionalInfo(additionalInfo);
            this.grpcClient.leave(grpcRequest, (grpcError) => {
                if (grpcError) {
                    reject(this.wrapGrpcError(grpcError));
                    return;
                }
                resolve();
            });
        });
    }
}
exports.AudioGatewayProtocolClient = AudioGatewayProtocolClient;
//# sourceMappingURL=audio-gateway-protocol.js.map