"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextProtocolClient = void 0;
const base = __importStar(require("./base"));
const sdk_grpc_pb = __importStar(require("./generated/sdk_grpc_pb"));
const sdk_pb = __importStar(require("./generated/sdk_pb"));
class TextProtocolClient extends base.Client {
    constructor(account, log) {
        super(sdk_grpc_pb.TextProtocolClient, account, log);
    }
    sendText(request) {
        return new Promise((resolve, reject) => {
            const { jobId, text } = request;
            const grpcRequest = new sdk_pb.TextProtocolMessage();
            grpcRequest.setJobId(jobId);
            grpcRequest.setText(new sdk_pb.TextMessage().setText(text));
            this.grpcClient.sendMessage(grpcRequest, (grpcError) => {
                if (grpcError) {
                    reject(this.wrapGrpcError(grpcError));
                    return;
                }
                resolve();
            });
        });
    }
    sendClose(request) {
        return new Promise((resolve, reject) => {
            const { jobId } = request;
            const grpcRequest = new sdk_pb.TextProtocolMessage();
            grpcRequest.setJobId(jobId);
            grpcRequest.setClosed(new sdk_pb.ClosedSessionMessage());
            this.grpcClient.sendMessage(grpcRequest, (grpcError) => {
                if (grpcError) {
                    reject(this.wrapGrpcError(grpcError));
                    return;
                }
                resolve();
            });
        });
    }
    messageStream(request) {
        return new base.Stream((stream) => {
            const grpcRequest = new sdk_pb.TextProtocolStreamInit();
            grpcRequest.setJobId(request.jobId);
            const grpcStream = this.grpcClient.messageStream(grpcRequest);
            grpcStream.on("error", (grpcError) => {
                stream.emit("error", this.wrapGrpcError(grpcError));
                stream.cancel();
            });
            grpcStream.on("end", () => {
                grpcStream.removeAllListeners();
                stream.removeAllListeners();
            });
            grpcStream.on("data", (grpcMessage) => {
                const { jobId, text, closed } = grpcMessage.toObject();
                if (text !== undefined) {
                    stream.emit("text", jobId, text.text);
                }
                if (closed !== undefined) {
                    stream.emit("close", jobId);
                }
            });
            return grpcStream;
        });
    }
}
exports.TextProtocolClient = TextProtocolClient;
//# sourceMappingURL=text-protocol.js.map