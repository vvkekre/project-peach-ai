"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AudioStreamProtocolClient = exports.DuplexAudioStream = exports.AudioEncoding = void 0;
const base = __importStar(require("./base"));
const services = __importStar(require("./generated/call-gateway_grpc_pb"));
const messages = __importStar(require("./generated/call-gateway_pb"));
var AudioEncoding;
(function (AudioEncoding) {
    AudioEncoding[AudioEncoding["LINEAR16"] = 0] = "LINEAR16";
})(AudioEncoding = exports.AudioEncoding || (exports.AudioEncoding = {}));
class DuplexAudioStream extends base.Stream {
    writeInfo(info) {
        const { roomId, encoding, sampleRate } = info;
        this._grpcStream.write(new messages.AudioBidirectionalStreamRequest().setInfo(new messages.AudioStreamRequest()
            .setRoomId(roomId)
            .setEncoding(encoding)
            .setSampleRate(sampleRate)));
    }
    writeAudio(data) {
        this._grpcStream.write(new messages.AudioBidirectionalStreamRequest().setAudio(new messages.RawAudioSegment().setData(data)));
    }
}
exports.DuplexAudioStream = DuplexAudioStream;
class AudioStreamProtocolClient extends base.Client {
    constructor(account, log) {
        super(services.AudioBidirectionalStreamProtocolClient, account, log);
    }
    audioStream() {
        return new DuplexAudioStream((stream) => {
            const grpcStream = this.grpcClient.audioStream();
            grpcStream.on("error", (grpcError) => {
                stream.emit("error", this.wrapGrpcError(grpcError));
                stream.cancel();
            });
            grpcStream.on("end", () => {
                stream.emit("end");
                grpcStream.removeAllListeners();
                stream.removeAllListeners();
            });
            grpcStream.on("data", (grpcMessage) => {
                stream.emit("audio", grpcMessage.getStreamId(), grpcMessage.getTime(), grpcMessage.getData_asU8());
            });
            return grpcStream;
        });
    }
}
exports.AudioStreamProtocolClient = AudioStreamProtocolClient;
//# sourceMappingURL=audio-stream-protocol.js.map