/// <reference types="node" />
import type * as http from "http";
import { Account } from "./account";
/**
 * Authorize the user on the Dasha platform,
 * returning an {@link Account} object with their credentials.
 *
 * When `callback` is called, it should open the provided `authUrl` in a browser window.
 * There will be a login form that, when the user logs in, redirects them to `redirectUri`.
 * It should then return the fragment (hash) part of the URI.
 *
 * @param options.server an endpoint to use for Dasha APIs
 * @param options.insecure whether to user non-TLS-encrypted connections
 */
export declare function authorize(options: {
    server: string;
    insecure?: boolean;
    redirectUri: string;
    responseType: "fragment";
    callback: (authUrl: string) => Promise<string>;
}): Promise<Account>;
/**
 * Authorize the user on the Dasha platform,
 * returning an {@link Account} object with their credentials.
 *
 * When `callback` is called, it should open the provided `authUrl` in a browser window.
 * There will be a login form that, when the user logs in, redirects them to `redirectUri`.
 * The caller must listen at the provided URI with an HTTP server and return the first request that comes.
 *
 * @param options.server an endpoint to use for Dasha APIs
 * @param options.insecure whether to user non-TLS-encrypted connections
 */
export declare function authorize(options: {
    server: string;
    insecure?: boolean;
    redirectUri: string;
    responseType: "form";
    callback: (authUrl: string) => Promise<http.IncomingMessage>;
}): Promise<Account>;
/**
 * Get a new free trial API key.
 *
 * @param options.server an endpoint to use for Dasha APIs
 * @param options.insecure whether to user non-TLS-encrypted connections
 */
export declare function startTrial(options: {
    server: string;
    insecure?: boolean;
}): Promise<Account>;
