"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Dasha.AI Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecordApi = exports.RecordApiFactory = exports.RecordApiFp = exports.RecordApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * RecordApi - axios parameter creator
 * @export
 */
const RecordApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} recordId
         * @param {ChannelType} [type]
         * @param {boolean} [inBrowser]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RecordsRecordIdGet: (recordId, type, inBrowser, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'recordId' is not null or undefined
            common_1.assertParamExists('apiV1RecordsRecordIdGet', 'recordId', recordId);
            const localVarPath = `/api/v1/records/{recordId}`
                .replace(`{${"recordId"}}`, encodeURIComponent(String(recordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (inBrowser !== undefined) {
                localVarQueryParameter['inBrowser'] = inBrowser;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.RecordApiAxiosParamCreator = RecordApiAxiosParamCreator;
/**
 * RecordApi - functional programming interface
 * @export
 */
const RecordApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.RecordApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {string} recordId
         * @param {ChannelType} [type]
         * @param {boolean} [inBrowser]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RecordsRecordIdGet(recordId, type, inBrowser, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1RecordsRecordIdGet(recordId, type, inBrowser, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.RecordApiFp = RecordApiFp;
/**
 * RecordApi - factory interface
 * @export
 */
const RecordApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.RecordApiFp(configuration);
    return {
        /**
         *
         * @param {string} recordId
         * @param {ChannelType} [type]
         * @param {boolean} [inBrowser]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RecordsRecordIdGet(recordId, type, inBrowser, options) {
            return localVarFp.apiV1RecordsRecordIdGet(recordId, type, inBrowser, options).then((request) => request(axios, basePath));
        },
    };
};
exports.RecordApiFactory = RecordApiFactory;
/**
 * RecordApi - object-oriented interface
 * @export
 * @class RecordApi
 * @extends {BaseAPI}
 */
class RecordApi extends base_1.BaseAPI {
    /**
     *
     * @param {string} recordId
     * @param {ChannelType} [type]
     * @param {boolean} [inBrowser]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordApi
     */
    apiV1RecordsRecordIdGet(recordId, type, inBrowser, options) {
        return exports.RecordApiFp(this.configuration).apiV1RecordsRecordIdGet(recordId, type, inBrowser, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.RecordApi = RecordApi;
//# sourceMappingURL=record-api.js.map