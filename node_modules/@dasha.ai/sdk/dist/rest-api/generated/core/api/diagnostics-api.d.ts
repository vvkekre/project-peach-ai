/**
 * Dasha.AI Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { LimitInformation } from '../models';
import { LimitsDTO } from '../models';
import { LimitsDiagnostic } from '../models';
import { QueuesDTO } from '../models';
import { QueuesDiagnostic } from '../models';
/**
 * DiagnosticsApi - axios parameter creator
 * @export
 */
export declare const DiagnosticsApiAxiosParamCreator: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsCustomerLimitGet: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsCustomerQueueLengthGet: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsCustomerQueuesLengthsGet: (options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} groupId
     * @param {string} applicationName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsGroupGroupIdApplicationApplicationNameLimitGet: (groupId: string, applicationName: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} groupId
     * @param {string} applicationName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsGroupGroupIdApplicationApplicationNameQueueLengthGet: (groupId: string, applicationName: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} groupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsGroupGroupIdLimitGet: (groupId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} groupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsGroupGroupIdQueueLengthGet: (groupId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsInstanceInstanceIdAllQueueLengthGet: (instanceId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsInstanceInstanceIdLimitGet: (instanceId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsInstanceInstanceIdLimitsGet: (instanceId: string, options?: any) => Promise<RequestArgs>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsLimitsGet: (options?: any) => Promise<RequestArgs>;
};
/**
 * DiagnosticsApi - functional programming interface
 * @export
 */
export declare const DiagnosticsApiFp: (configuration?: Configuration | undefined) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsCustomerLimitGet(options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LimitInformation>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsCustomerQueueLengthGet(options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<number>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsCustomerQueuesLengthsGet(options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<QueuesDTO>>;
    /**
     *
     * @param {string} groupId
     * @param {string} applicationName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsGroupGroupIdApplicationApplicationNameLimitGet(groupId: string, applicationName: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LimitInformation>>;
    /**
     *
     * @param {string} groupId
     * @param {string} applicationName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsGroupGroupIdApplicationApplicationNameQueueLengthGet(groupId: string, applicationName: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<number>>;
    /**
     *
     * @param {string} groupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsGroupGroupIdLimitGet(groupId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LimitInformation>>;
    /**
     *
     * @param {string} groupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsGroupGroupIdQueueLengthGet(groupId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<number>>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsInstanceInstanceIdAllQueueLengthGet(instanceId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<QueuesDiagnostic>>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsInstanceInstanceIdLimitGet(instanceId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LimitInformation>>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsInstanceInstanceIdLimitsGet(instanceId: string, options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LimitsDiagnostic>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsLimitsGet(options?: any): Promise<(axios?: AxiosInstance | undefined, basePath?: string | undefined) => AxiosPromise<LimitsDTO>>;
};
/**
 * DiagnosticsApi - factory interface
 * @export
 */
export declare const DiagnosticsApiFactory: (configuration?: Configuration | undefined, basePath?: string | undefined, axios?: AxiosInstance | undefined) => {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsCustomerLimitGet(options?: any): AxiosPromise<LimitInformation>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsCustomerQueueLengthGet(options?: any): AxiosPromise<number>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsCustomerQueuesLengthsGet(options?: any): AxiosPromise<QueuesDTO>;
    /**
     *
     * @param {string} groupId
     * @param {string} applicationName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsGroupGroupIdApplicationApplicationNameLimitGet(groupId: string, applicationName: string, options?: any): AxiosPromise<LimitInformation>;
    /**
     *
     * @param {string} groupId
     * @param {string} applicationName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsGroupGroupIdApplicationApplicationNameQueueLengthGet(groupId: string, applicationName: string, options?: any): AxiosPromise<number>;
    /**
     *
     * @param {string} groupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsGroupGroupIdLimitGet(groupId: string, options?: any): AxiosPromise<LimitInformation>;
    /**
     *
     * @param {string} groupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsGroupGroupIdQueueLengthGet(groupId: string, options?: any): AxiosPromise<number>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsInstanceInstanceIdAllQueueLengthGet(instanceId: string, options?: any): AxiosPromise<QueuesDiagnostic>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsInstanceInstanceIdLimitGet(instanceId: string, options?: any): AxiosPromise<LimitInformation>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsInstanceInstanceIdLimitsGet(instanceId: string, options?: any): AxiosPromise<LimitsDiagnostic>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiV1DiagnosticsLimitsGet(options?: any): AxiosPromise<LimitsDTO>;
};
/**
 * DiagnosticsApi - object-oriented interface
 * @export
 * @class DiagnosticsApi
 * @extends {BaseAPI}
 */
export declare class DiagnosticsApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticsApi
     */
    apiV1DiagnosticsCustomerLimitGet(options?: any): Promise<import("axios").AxiosResponse<LimitInformation>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticsApi
     */
    apiV1DiagnosticsCustomerQueueLengthGet(options?: any): Promise<import("axios").AxiosResponse<number>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticsApi
     */
    apiV1DiagnosticsCustomerQueuesLengthsGet(options?: any): Promise<import("axios").AxiosResponse<QueuesDTO>>;
    /**
     *
     * @param {string} groupId
     * @param {string} applicationName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticsApi
     */
    apiV1DiagnosticsGroupGroupIdApplicationApplicationNameLimitGet(groupId: string, applicationName: string, options?: any): Promise<import("axios").AxiosResponse<LimitInformation>>;
    /**
     *
     * @param {string} groupId
     * @param {string} applicationName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticsApi
     */
    apiV1DiagnosticsGroupGroupIdApplicationApplicationNameQueueLengthGet(groupId: string, applicationName: string, options?: any): Promise<import("axios").AxiosResponse<number>>;
    /**
     *
     * @param {string} groupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticsApi
     */
    apiV1DiagnosticsGroupGroupIdLimitGet(groupId: string, options?: any): Promise<import("axios").AxiosResponse<LimitInformation>>;
    /**
     *
     * @param {string} groupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticsApi
     */
    apiV1DiagnosticsGroupGroupIdQueueLengthGet(groupId: string, options?: any): Promise<import("axios").AxiosResponse<number>>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticsApi
     */
    apiV1DiagnosticsInstanceInstanceIdAllQueueLengthGet(instanceId: string, options?: any): Promise<import("axios").AxiosResponse<QueuesDiagnostic>>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticsApi
     */
    apiV1DiagnosticsInstanceInstanceIdLimitGet(instanceId: string, options?: any): Promise<import("axios").AxiosResponse<LimitInformation>>;
    /**
     *
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticsApi
     */
    apiV1DiagnosticsInstanceInstanceIdLimitsGet(instanceId: string, options?: any): Promise<import("axios").AxiosResponse<LimitsDiagnostic>>;
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DiagnosticsApi
     */
    apiV1DiagnosticsLimitsGet(options?: any): Promise<import("axios").AxiosResponse<LimitsDTO>>;
}
