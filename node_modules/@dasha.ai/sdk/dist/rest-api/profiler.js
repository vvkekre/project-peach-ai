"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfilerApi = void 0;
const errors = __importStar(require("../errors"));
const log_1 = require("../log");
const base = __importStar(require("./base"));
const api = __importStar(require("./generated/profiler"));
const models = __importStar(require("./generated/profiler"));
const axios_1 = __importDefault(require("axios"));
const formatRequest = ({ applicationId, start, end }) => ({
    applicationId,
    start: start.toISOString(),
    end: end.toISOString(),
    clustersNumber: undefined,
    clusterAlgorithm: models.ClusterAlgorithmEnum.DbscanWithEdge,
});
class ProfilerApi extends base.Api {
    constructor(account, log) {
        super(api.ProfilerApi, account, log);
    }
    generate(req, cancelToken) {
        return __awaiter(this, void 0, void 0, function* () {
            const cancelSource = axios_1.default.CancelToken.source();
            cancelToken === null || cancelToken === void 0 ? void 0 : cancelToken._onCancel(this.log, () => cancelSource.cancel());
            const response = yield this.api.apiV1ProfilerRequestPost(formatRequest(req), {
                cancelToken: cancelSource.token,
            });
            return response.data;
        });
    }
    download(req, cancelToken, onProgress) {
        return __awaiter(this, void 0, void 0, function* () {
            const options = formatRequest(req);
            const cancelSource = axios_1.default.CancelToken.source();
            cancelToken === null || cancelToken === void 0 ? void 0 : cancelToken._onCancel(this.log, () => cancelSource.cancel());
            const { data, headers } = yield this.api.apiV1ProfilerDownloadGet(options.start, options.end, options.applicationId, options.clustersNumber, options.clusterAlgorithm, {
                cancelToken: cancelSource.token,
                responseType: "stream",
            });
            return new Promise((resolve, reject) => {
                const stream = data;
                const total = headers["content-length"];
                const buff = [];
                let loaded = 0;
                stream.on("data", (chunk) => {
                    loaded += chunk.length;
                    onProgress === null || onProgress === void 0 ? void 0 : onProgress(loaded, total !== null && total !== void 0 ? total : loaded);
                    buff.push(chunk);
                });
                stream.on("error", reject);
                stream.on("end", () => resolve(Buffer.concat(buff)));
            });
        });
    }
    isAvailableToDownload(req, cancelToken) {
        return __awaiter(this, void 0, void 0, function* () {
            const cancelSource = axios_1.default.CancelToken.source();
            cancelToken === null || cancelToken === void 0 ? void 0 : cancelToken._onCancel(this.log, () => cancelSource.cancel());
            const options = formatRequest(req);
            const { data: status } = yield this.api.apiV1ProfilerStatusGet(options.start, options.end, options.applicationId, options.clustersNumber, options.clusterAlgorithm, { cancelToken: cancelSource.token });
            if (status === models.ProfilerStatusCode.Failed) {
                log_1.logAndThrow(this.log, new errors.ProfilerDataFailedError(req));
            }
            return status === models.ProfilerStatusCode.Done;
        });
    }
}
exports.ProfilerApi = ProfilerApi;
//# sourceMappingURL=profiler.js.map