"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._makeDefaultAudioConfig = exports.connect = exports.fromFile = exports.fromFetchResponse = exports.fromBlob = exports.Audio = void 0;
const errors = __importStar(require("./errors"));
const sip = __importStar(require("./sip"));
const log_1 = require("./log");
//#region custom tts utilities
/**
 * Audio data. Primarily used by {@link CustomTtsProvider} callbacks and created by
 * {@link fromFile}, {@link fromBlob}, or {@link fromFetchResponse}.
 */
class Audio {
    /** @internal */
    constructor(format, data) {
        this._format = format;
        this._data = data;
    }
}
exports.Audio = Audio;
function _guessFormatFromMime(mime) {
    switch (mime) {
        case "audio/vnd.wave":
        case "audio/wav":
        case "audio/wave":
        case "audio/x-wav":
            return "wav";
        case "audio/mpeg":
        case "audio/MPA":
        case "audio/mpa-robust":
            return "mp3";
        case "audio/L16":
            return "pcm16";
        default:
            log_1.logAndThrow(log_1.log, new errors.AudioError(`mime type not supported: ${mime}`));
    }
}
function _guessFormatFromExtension(path) {
    const periodIndex = path.lastIndexOf(".");
    const extension = periodIndex < 0 ? "" : path.slice(periodIndex + 1).toLowerCase();
    switch (extension) {
        case "wav":
            return "wav";
        case "mp3":
            return "mp3";
        default:
            log_1.logAndThrow(log_1.log, new errors.AudioError(`cannot guess file format from extension: ${extension}`));
    }
}
/**
 * Creates an {@link Audio} object from a [Blob].
 *
 * [Blob]: https://developer.mozilla.org/en-US/docs/Web/API/Blob
 */
function fromBlob(blob) {
    return __awaiter(this, void 0, void 0, function* () {
        const format = _guessFormatFromMime(blob.type);
        const data = new Uint8Array(yield blob.arrayBuffer());
        return new Audio(format, data);
    });
}
exports.fromBlob = fromBlob;
/**
 * Creates an {@link Audio} object from a [Fetch API]'s [Response] object.
 * Note that {@link CustomTtsProvider} callbacks can directly return a Response.
 *
 * [Fetch API]: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
 * [Response]: https://developer.mozilla.org/en-US/docs/Web/API/Response
 */
function fromFetchResponse(response) {
    return __awaiter(this, void 0, void 0, function* () {
        // TODO: handle http errors?
        return yield fromBlob(yield response.blob());
    });
}
exports.fromFetchResponse = fromFetchResponse;
/**
 * Creates an {@link Audio} object from a file on a local filesystem.
 * This function is only available in Node.js.
 *
 * @param format manually specify the file format;
 *   if not set, the format is guessed based on file extension
 */
function fromFile(path, format) {
    return __awaiter(this, void 0, void 0, function* () {
        const fs = yield Promise.resolve().then(() => __importStar(require("fs"))).catch(() => {
            log_1.logAndThrow(log_1.log, new errors.NotImplementedError("only implemented in node"));
        });
        return new Audio(format !== null && format !== void 0 ? format : _guessFormatFromExtension(path), yield fs.promises.readFile(path));
    });
}
exports.fromFile = fromFile;
//#endregion
/**
 * @deprecated use the `channel` argument to {@link Conversation.execute} instead
 */
function connect(options) {
    return sip.connect(new sip.Endpoint("default", options));
}
exports.connect = connect;
/** @internal */
function _makeDefaultAudioConfig() {
    return {
        tts: "default",
        stt: "default",
    };
}
exports._makeDefaultAudioConfig = _makeDefaultAudioConfig;
//# sourceMappingURL=audio.js.map