"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadProfile = void 0;
const rest_api_1 = require("./rest-api");
const account_1 = require("./account");
const log_1 = require("./log");
const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
const WARN_PROFILE_BYTES = 320 * 1024;
const loadProfile = (request, options) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const { cancelToken, pollInterval = 2000 } = options !== null && options !== void 0 ? options : {};
    const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (yield account_1._getEffectiveAccount({ _log: log_1.log }));
    const logger = log_1.log.child({ account: account_1.anonymizeAccount(account) });
    const api = new rest_api_1.ProfilerApi(account, logger);
    const onProgress = (progress) => {
        var _a;
        (_a = options === null || options === void 0 ? void 0 : options.onProgress) === null || _a === void 0 ? void 0 : _a.call(options, progress);
        logger.info(`${progress.scopes.join(": ")}: ${progress.description} ${progress.percent}%`);
    };
    let percent = 0;
    onProgress === null || onProgress === void 0 ? void 0 : onProgress({
        percent,
        description: "Profile generation request",
        scopes: ["profiler"],
    });
    cancelToken === null || cancelToken === void 0 ? void 0 : cancelToken._throwIfCanceled(logger);
    yield api.generate(request, cancelToken);
    percent = 33;
    onProgress === null || onProgress === void 0 ? void 0 : onProgress({ percent, description: "Profile is generating...", scopes: ["profiler"] });
    cancelToken === null || cancelToken === void 0 ? void 0 : cancelToken._throwIfCanceled(logger);
    let polls = 1;
    let isGenerated = yield api.isAvailableToDownload(request, cancelToken);
    while (!isGenerated) {
        onProgress === null || onProgress === void 0 ? void 0 : onProgress({
            percent,
            description: `Profile is generating... (${polls})`,
            scopes: ["profiler"],
        });
        cancelToken === null || cancelToken === void 0 ? void 0 : cancelToken._throwIfCanceled(logger);
        yield delay(pollInterval);
        cancelToken === null || cancelToken === void 0 ? void 0 : cancelToken._throwIfCanceled(logger);
        isGenerated = yield api.isAvailableToDownload(request, cancelToken);
        polls++;
    }
    percent = 66;
    onProgress === null || onProgress === void 0 ? void 0 : onProgress({
        percent,
        description: "Profile generated, download starts",
        scopes: ["profiler"],
    });
    cancelToken === null || cancelToken === void 0 ? void 0 : cancelToken._throwIfCanceled(logger);
    const buffer = yield api.download(request, cancelToken, (loaded, total) => {
        onProgress === null || onProgress === void 0 ? void 0 : onProgress({
            percent: percent + Math.round((loaded / total) * (99 - percent)),
            description: "Profile is downloading...",
            scopes: ["profiler"],
        });
    });
    percent = 100;
    onProgress === null || onProgress === void 0 ? void 0 : onProgress({
        percent,
        description: "Profile downloaded",
        scopes: ["profiler"],
    });
    if (buffer.byteLength <= WARN_PROFILE_BYTES) {
        const size = Math.round(buffer.byteLength / 1024);
        logger.warn(`The loaded profile is very small (${size}kb), maybe it is empty`);
    }
    return buffer;
});
exports.loadProfile = loadProfile;
//# sourceMappingURL=profiler.js.map