import EventEmitter from "eventemitter3";
import * as audio from "./audio";
import * as sip from "./sip";
import { CancelToken } from "./cancel";
import { Logger } from "./log";
import { Transcription } from "./transcription";
/**
 * A conversation between an {@link Application} and its conversational partner.
 */
export interface Conversation<TInput extends Record<string, unknown> = Record<string, unknown>, TOutput extends Record<string, unknown> = Record<string, unknown>> extends EventEmitter<{
    debugLog: [event: unknown];
    transcription: [transcription: Transcription];
}> {
    readonly log: Logger;
    /**
     * The input data to be passed as the [input context] of a [DashaScript] application.
     *
     * [input context]: https://docs.dasha.ai/en-us/default/dasha-script-language/program-structure/#block-context
     * [DashaScript]: https://docs.dasha.ai/en-us/default/dasha-script-language/
     */
    input: TInput;
    audio: audio.AudioConfig;
    sip: sip.SipConfig;
    /**
     * Start a conversation, i.e. run the [DashaScript] code
     * on a specified {@link Conversation.input | input}.
     *
     * Returns a promise that settles when the conversation has finished.
     * It rejects on errors, and resolves on successful completion.
     */
    execute(options?: {
        /**
         * @default "audio"
         * */
        channel?: "audio" | "text";
        cancelToken?: CancelToken;
    }): Promise<ConversationResult<TOutput>>;
}
/**
 * The result of a successfully completed conversation.
 */
export interface ConversationResult<TOutput extends Record<string, unknown>> {
    /**
     * The [output context] of a [DashaScript] application.
     *
     * [output context]: https://docs.dasha.ai/en-us/default/dasha-script-language/program-structure/#block-context
     * [DashaScript]: https://docs.dasha.ai/en-us/default/dasha-script-language/
     */
    output: TOutput;
    /**
     * A full transcription of the conversation, sorted by phrase start time.
     */
    transcription: Transcription[];
    /**
     * A URL of the recording of a conversation, if one exists.
     */
    recordingUrl?: string;
}
