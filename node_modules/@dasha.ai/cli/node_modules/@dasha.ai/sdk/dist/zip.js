"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.file = exports.directory = void 0;
const log_1 = require("./log");
const errors = require("./errors");
/** @internal */
function directory(path, log) {
    return __awaiter(this, void 0, void 0, function* () {
        const archiver = yield Promise.resolve().then(() => require("archiver")).catch(() => {
            log_1.logAndThrow(log, new errors.OptionalDependencyNotFoundError("archiver"));
        });
        return new Promise((resolve, reject) => {
            const zip = archiver("zip");
            const chunks = [];
            zip.on("error", (error) => reject(log_1.logAndReturn(log, new errors.FileSystemError(error))));
            zip.on("warning", (error) => reject(log_1.logAndReturn(log, new errors.FileSystemError(error))));
            zip.on("data", (chunk) => chunks.push(chunk));
            zip.on("finish", () => resolve(Buffer.concat(chunks)));
            zip.directory(path, false);
            zip.finalize().catch((error) => reject(log_1.logAndReturn(log, new errors.FileSystemError(error))));
        });
    });
}
exports.directory = directory;
/** @internal */
function file(name, content, log) {
    return __awaiter(this, void 0, void 0, function* () {
        const archiver = yield Promise.resolve().then(() => require("archiver")).catch(() => {
            log_1.logAndThrow(log, new errors.OptionalDependencyNotFoundError("archiver"));
        });
        return new Promise((resolve, reject) => {
            const zip = archiver("zip");
            const chunks = [];
            zip.on("error", (error) => reject(log_1.logAndReturn(log, new errors.FileSystemError(error))));
            zip.on("warning", (error) => reject(log_1.logAndReturn(log, new errors.FileSystemError(error))));
            zip.on("data", (chunk) => chunks.push(chunk));
            zip.on("finish", () => resolve(Buffer.concat(chunks)));
            zip.append(content, { name });
            zip.finalize().catch((error) => reject(log_1.logAndReturn(log, new errors.FileSystemError(error))));
        });
    });
}
exports.file = file;
//# sourceMappingURL=zip.js.map