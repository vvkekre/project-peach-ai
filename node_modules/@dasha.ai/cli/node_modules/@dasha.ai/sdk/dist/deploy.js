"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deploy = void 0;
const account_1 = require("./account");
const application_1 = require("./application");
const log_1 = require("./log");
const rest = require("./rest-api");
const zip = require("./zip");
function deploy(pathOrZip, options) {
    var _a, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (yield account_1._getEffectiveAccount({ _log: log_1.log }));
        const accountLog = log_1.log.child({ account: account_1.anonymizeAccount(account) });
        accountLog.info(`connecting to ${account.server}`);
        if (account.insecure)
            accountLog.warn(`TLS is disabled`);
        const customerApi = new rest.CustomerApi(account, accountLog);
        const customer = yield customerApi.getMe();
        const customerLog = accountLog.child({ customer });
        customerLog.info(`customerId: ${customer.id}`);
        const groupApi = new rest.GroupApi(account, customerLog);
        const group = (options === null || options === void 0 ? void 0 : options.groupName) !== undefined
            ? yield groupApi.getGroupByName(options.groupName)
            : yield groupApi.createTemporaryGroup();
        const applicationLog = customerLog.child({ group });
        if (group.isTemporaryGroup) {
            applicationLog.info(`using a temporary group`);
        }
        applicationLog.info(`groupName: ${group.name}`);
        applicationLog.info(`groupId: ${group.id}`);
        const applicationZip = typeof pathOrZip === "string" ? yield zip.directory(pathOrZip, customerLog) : pathOrZip;
        return yield application_1.Application._deploy({
            log: applicationLog,
            applicationZip,
            account,
            customerId: customer.id,
            groupId: group.id,
            onProgress: options === null || options === void 0 ? void 0 : options.onProgress,
            cancelToken: options === null || options === void 0 ? void 0 : options.cancelToken,
            reconnectInterval: (_b = options === null || options === void 0 ? void 0 : options.reconnectInterval) !== null && _b !== void 0 ? _b : 10 * 1000,
            maxReconnectCount: (_c = options === null || options === void 0 ? void 0 : options.maxReconnectCount) !== null && _c !== void 0 ? _c : 3,
        });
    });
}
exports.deploy = deploy;
//# sourceMappingURL=deploy.js.map