/**
 * Stored account management.
 *
 * A number of account records can be stored into a platform-specific storage.
 * One of them can be marked as {@link getCurrentAccountName | current},
 * which will cause it to be used as a default account for methods that need one.
 *
 * In Node.js, you can manage stored accounts using the [Dasha CLI].
 *
 * [Dasha CLI]: https://npmjs.com/@dasha.ai/cli
 *
 * @module
 */
export interface Account {
    /**
     * Dasha.AI API server URL. In most cases, it should be `"app.us.dasha.ai"`.
     */
    server: string;
    /**
     * Dasha.AI API key.
     *
     * To get your API key, you can use the [Dasha CLI].
     *
     * [Dasha CLI]: https://npmjs.com/@dasha.ai/cli
     */
    apiKey: string;
    /**
     * Whether to use an insecure (non-TLS) connection.
     *
     * @default false
     */
    insecure?: boolean;
}
/**
 * List all stored accounts.
 *
 * @returns a dictionary object storing accounts by their name
 */
export declare function listAccounts(): Promise<{
    [name: string]: Account;
}>;
/**
 * Get an account by its name. Throws if no account was found.
 */
export declare function getAccount(name: string): Promise<Account>;
/**
 * Store an account under a name.
 *
 * @param options.overwrite if true, does not throw if the name is taken
 */
export declare function setAccount(name: string, account: Account, options?: {
    overwrite?: boolean;
}): Promise<void>;
/**
 * Rename a stored account.
 *
 * @param options.overwrite if true, does not throw if the new name is taken.
 */
export declare function renameAccount(oldName: string, newName: string, options?: {
    overwrite?: boolean;
}): Promise<void>;
/**
 * Delete a stored account.
 *
 * @param options.quiet if true, does not throw if no account was found
 */
export declare function deleteAccount(name: string, options?: {
    quiet?: boolean;
}): Promise<void>;
/**
 * Get the name of a stored account that is marked as current, or `undefined` if no one is.
 */
export declare function getCurrentAccountName(): Promise<string | undefined>;
/**
 * Mark a stored account as current. Pass `undefined` to unset a current account altogether.
 */
export declare function setCurrentAccountName(name: string | undefined): Promise<void>;
