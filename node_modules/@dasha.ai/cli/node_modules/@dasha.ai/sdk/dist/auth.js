"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startTrial = exports.authorize = void 0;
const openid = require("openid-client");
const parseBody = require("co-body");
const querystring = require("querystring");
const rest = require("./rest-api");
const log_1 = require("./log");
function authorize(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const { server, insecure, redirectUri, responseType, callback } = options;
        const log = log_1.log.child({ label: "auth", account: { server, insecure } });
        log.info(`authorizing on ${server}`);
        if (insecure)
            log.warn(`TLS is disabled`);
        const miscApi = new rest.MiscApi({ server, insecure, apiKey: "" }, log);
        const authServerUrl = yield miscApi.getAuthServerUrl();
        const issuer = yield openid.Issuer.discover(authServerUrl);
        const client = new issuer.Client({ client_id: "platform_client" });
        const nonce = openid.generators.nonce();
        const authUrl = client.authorizationUrl({
            scope: "platform_api",
            response_type: "token",
            redirect_uri: redirectUri,
            prompt: "login",
            response_mode: responseType === "form" ? "form_post" : undefined,
            nonce,
        });
        const callbackResult = yield callback(authUrl);
        let parameters = {};
        if (responseType === "form" && typeof callbackResult !== "string") {
            parameters = yield parseBody.form(callbackResult);
        }
        if (responseType === "fragment" && typeof callbackResult === "string") {
            parameters = querystring.parse(callbackResult.slice(1));
        }
        const tokenSet = yield client.callback(redirectUri, parameters, {
            response_type: "token",
            nonce,
        });
        return {
            server,
            insecure,
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            apiKey: tokenSet.access_token,
        };
    });
}
exports.authorize = authorize;
// TODO: do we have free trial docs?
/**
 * Get a new free trial API key.
 *
 * @param options.server an endpoint to use for Dasha APIs
 * @param options.insecure whether to user non-TLS-encrypted connections
 */
function startTrial(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const { server, insecure } = options;
        const log = log_1.log.child({ label: "auth", account: { server, insecure } });
        log.info(`requesting trial key from ${server}`);
        if (insecure)
            log.warn(`TLS is disabled`);
        const miscApi = new rest.MiscApi({ server, insecure, apiKey: "" }, log);
        const { apiKey } = yield miscApi.startTrial();
        return { server, insecure, apiKey };
    });
}
exports.startTrial = startTrial;
//# sourceMappingURL=auth.js.map