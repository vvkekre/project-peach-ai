"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = exports.Stream = void 0;
const EventEmitter = require("eventemitter3");
const grpc = require("@grpc/grpc-js");
const log_1 = require("../log");
const errors = require("../errors");
class Stream extends EventEmitter {
    constructor(init) {
        super();
        this._grpcStream = init(this);
    }
    cancel() {
        this.removeAllListeners();
        this._grpcStream.removeAllListeners();
        this._grpcStream.on("error", () => void 0);
        // workaround for https://github.com/grpc/grpc-node/issues/1652
        setTimeout(() => {
            this._grpcStream.cancel();
        }, 0);
    }
}
exports.Stream = Stream;
class Client {
    constructor(Client, account, log) {
        this.log = log;
        const { server, apiKey, insecure } = account;
        const metadata = new grpc.Metadata();
        metadata.add("Authorization", `Bearer ${apiKey}`);
        if (insecure) {
            this.grpcClient = new Client(server, grpc.credentials.createInsecure(), {
                callInvocationTransformer(callProperties) {
                    callProperties.metadata.merge(metadata);
                    return callProperties;
                },
                "grpc.keepalive_time_ms": 10000,
            });
        }
        else {
            this.grpcClient = new Client(server, grpc.credentials
                .createSsl()
                .compose(grpc.credentials.createFromMetadataGenerator((_, cb) => cb(null, metadata))), {
                "grpc.keepalive_time_ms": 10000,
            });
        }
    }
    close() {
        this.grpcClient.close();
    }
    wrapGrpcError(error) {
        this.log.debug(error);
        switch (error.code) {
            case grpc.status.INVALID_ARGUMENT:
                return log_1.logAndReturn(this.log, new errors.ArgumentError(error.message));
            case grpc.status.INTERNAL:
                if (error.message.startsWith("Received RST_STREAM with code 2")) {
                    return log_1.logAndReturn(this.log, new errors.ConnectionError(error.message, error, true));
                }
                return log_1.logAndReturn(this.log, new errors.InternalError(error.message, error));
            case grpc.status.UNAVAILABLE:
                return log_1.logAndReturn(this.log, new errors.ConnectionError(error.message, error, true));
            case grpc.status.UNAUTHENTICATED:
                return log_1.logAndReturn(this.log, new errors.AuthenticationError());
            default:
                return log_1.logAndReturn(this.log, new errors.InternalError(error.message, error));
        }
    }
}
exports.Client = Client;
//# sourceMappingURL=base.js.map