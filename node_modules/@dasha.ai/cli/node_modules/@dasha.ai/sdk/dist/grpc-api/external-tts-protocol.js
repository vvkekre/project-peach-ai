"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExternalTtsClient = void 0;
const base = require("./base");
const errors = require("../errors");
const log_1 = require("../log");
const external_tts_grpc_pb = require("./generated/external-client-tts_grpc_pb");
const external_tts_pb = require("./generated/external-client-tts_pb");
class ExternalTtsClient extends base.Client {
    constructor(account, log) {
        super(external_tts_grpc_pb.ExternalClientTtsProtocolClient, account, log);
    }
    sendAudioData(request) {
        return new Promise((resolve, reject) => {
            const grpcRequest = new external_tts_pb.ExternalClientTtsResponse()
                .setRequestId(request.requestId)
                .setMessageId(request.messageId)
                .setInstanceId(request.instanceId)
                .setSuccessResponse(new external_tts_pb.ExternalClientTtsSuccessResponse()
                .setAudioFormat(request.audio.format)
                .setAudioData(request.audio.data));
            this.grpcClient.sendAudio(grpcRequest, (grpcError) => {
                if (grpcError) {
                    reject(this.wrapGrpcError(grpcError));
                    return;
                }
                resolve();
            });
        });
    }
    sendAudioError(request) {
        return new Promise((resolve, reject) => {
            const grpcRequest = new external_tts_pb.ExternalClientTtsResponse()
                .setRequestId(request.requestId)
                .setMessageId(request.messageId)
                .setInstanceId(request.instanceId)
                .setError(new external_tts_pb.ExternalClientTtsError()
                .setType(request.error.type)
                .setMessage(request.error.message)
                .setDetails(request.error.details));
            this.grpcClient.sendAudio(grpcRequest, (grpcError) => {
                if (grpcError) {
                    reject(this.wrapGrpcError(grpcError));
                    return;
                }
                resolve();
            });
        });
    }
    audioRequestStream(request) {
        return new base.Stream((stream) => {
            const grpcRequest = new external_tts_pb.ExternalClientTtsProtocolStreamInit();
            grpcRequest.setInstanceId(request.instanceId);
            const grpcStream = this.grpcClient.audioRequestStream(grpcRequest);
            grpcStream.on("error", (grpcError) => {
                stream.emit("error", this.wrapGrpcError(grpcError));
                stream.cancel();
            });
            grpcStream.on("end", () => {
                stream.removeAllListeners();
            });
            grpcStream.on("data", (grpcMessage) => {
                const { requestId, messageId, text, voiceInfo } = grpcMessage.toObject();
                if (voiceInfo === undefined)
                    log_1.logAndThrow(this.log, new errors.InternalError());
                stream.emit("request", { requestId, messageId, text, voiceInfo });
            });
            return grpcStream;
        });
    }
}
exports.ExternalTtsClient = ExternalTtsClient;
//# sourceMappingURL=external-tts-protocol.js.map