import { Account } from "./account";
import { Application } from "./application";
import { CancelToken } from "./cancel";
import { ProgressHandler } from "./progress";
export interface DeploymentOptions {
    /**
     * A Dasha.AI API account to use.
     *
     * If not set, defaults to a "current" account derived in a platform-specific way.
     * For Node.js, the current account may be set using [Dasha CLI].
     *
     * [Dasha CLI]: https://npmjs.com/@dasha.ai/cli
     */
    account?: Account;
    /**
     * A [group] to use for the application instance.
     *
     * If not set, the application is run in a separate, unnamed group.
     */
    groupName?: string;
    /**
     * A callback that, if set, receives the current status of the deployment process.
     */
    onProgress?: ProgressHandler;
    cancelToken?: CancelToken;
    /**
     * An interval, in milliseconds, to retry connecting to server in case of connection issues.
     */
    reconnectInterval?: number;
    /**
     * How many times to try to reconnect to server in case of connection issues.
     * Set to zero to disable reconnection attempts.
     */
    maxReconnectCount?: number;
}
/**
 * Deploy the application to the Dasha.AI platform, performing the necessary preparation steps.
 *
 * TODO: list what's exactly happening
 *
 * This overload is only implemented for Node.js.
 *
 * @param path path to the application directory
 */
export declare function deploy<TInput extends Record<string, unknown> = Record<string, unknown>, TOutput extends Record<string, unknown> = Record<string, unknown>>(path: string, options?: DeploymentOptions): Promise<Application<TInput, TOutput>>;
/**
 * Deploy the application to the Dasha.AI platform, performing the necessary preparation steps.
 *
 * TODO: list what's exactly happening
 *
 * @param zip the application packed into a ZIP archive
 */
export declare function deploy<TInput extends Record<string, unknown> = Record<string, unknown>, TOutput extends Record<string, unknown> = Record<string, unknown>>(zip: Uint8Array, options?: DeploymentOptions): Promise<Application<TInput, TOutput>>;
