"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateConfig = exports.listConfigs = exports.createConfig = exports.deleteConfig = void 0;
const account_1 = require("../account");
const log_1 = require("../log");
const errors = require("../errors");
const rest = require("../rest-api");
function toOutboundConfig(dto, log) {
    var _a, _b;
    if (dto.transport !== "tcp" && dto.transport !== "udp") {
        log_1.logAndThrow(log, new errors.InternalError(`unexpected SIP transport: ${dto.transport}`));
    }
    return {
        server: dto.server,
        domain: (_a = dto.domain) !== null && _a !== void 0 ? _a : undefined,
        transport: dto.transport,
        account: dto.account,
        sourceIps: (_b = dto.sourceIPs) !== null && _b !== void 0 ? _b : undefined,
    };
}
/**
 * Delete an outbound SIP config from the Dasha platform.
 *
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 * @param options.quiet if true, does not complain if the config does not exist
 */
function deleteConfig(name, options) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (yield account_1._getEffectiveAccount({ _log: log_1.log }));
        const log = log_1.log.child({ account: account_1.anonymizeAccount(account) });
        const api = new rest.SipOutboundApi(account, log);
        yield api.deleteConfig(name, options);
    });
}
exports.deleteConfig = deleteConfig;
/**
 * Create a new outbound SIP config.
 *
 * @param config see {@link OutboundConfig}
 * @param config.password authorization password, if one is needed
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 *
 * @returns a newly created config
 */
// TODO: document config.password
function createConfig(name, config, options) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (yield account_1._getEffectiveAccount({ _log: log_1.log }));
        const log = log_1.log.child({ account: account_1.anonymizeAccount(account) });
        const api = new rest.SipOutboundApi(account, log);
        const newConfig = yield api.createConfig(Object.assign(Object.assign({}, config), { name }));
        return toOutboundConfig(newConfig, log);
    });
}
exports.createConfig = createConfig;
/**
 * List all outbound SIP configs available to an account.
 *
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 *
 * @returns a dictionary of {@link OutboundConfig} objects by their name
 */
function listConfigs(options) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (yield account_1._getEffectiveAccount({ _log: log_1.log }));
        const log = log_1.log.child({ account: account_1.anonymizeAccount(account) });
        const api = new rest.SipOutboundApi(account, log);
        const configs = yield api.listConfigs();
        const entries = configs.map((config) => [config.name, toOutboundConfig(config, log)]);
        return Object.fromEntries(entries);
    });
}
exports.listConfigs = listConfigs;
/**
 * Update an outbound SIP config. Pass `null` in the optional fields to reset to defaults.
 *
 * @param patch see {@link OutboundConfig}
 * @param patch.password authorization password, if one is needed
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 *
 * @returns an updated config
 */
// TODO: document patch.password
function updateConfig(name, patch, options) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (yield account_1._getEffectiveAccount({ _log: log_1.log }));
        const log = log_1.log.child({ account: account_1.anonymizeAccount(account) });
        const api = new rest.SipOutboundApi(account, log);
        const config = yield api.updateConfig(name, patch);
        return toOutboundConfig(config, log);
    });
}
exports.updateConfig = updateConfig;
//# sourceMappingURL=outbound-configs.js.map