import { Account } from "../account";
/**
 * Outbound SIP configuration.
 */
export interface OutboundConfig {
    /**
     * Server to send requests to, specified as `<ip|domainName>[:port]`.
     * Default port is `5060`.
     */
    server: string;
    /**
     * Domain to use in `From`/`To` headers. If not set, {@link OutboundConfig.server} is used.
     */
    domain?: string;
    /**
     * Which transport protocol to use.
     */
    transport: "tcp" | "udp";
    /**
     * SIP account to use for authorization and `From`/`To` headers.
     */
    account: string;
    /**
     * A list of IPs that are allowed to make requests.
     * Intended for setting up correct client-side ACLs.
     */
    sourceIps?: string[];
}
/**
 * Delete an outbound SIP config from the Dasha platform.
 *
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 * @param options.quiet if true, does not complain if the config does not exist
 */
export declare function deleteConfig(name: string, options?: {
    account?: Account;
    quiet?: boolean;
}): Promise<void>;
/**
 * Create a new outbound SIP config.
 *
 * @param config see {@link OutboundConfig}
 * @param config.password authorization password, if one is needed
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 *
 * @returns a newly created config
 */
export declare function createConfig(name: string, config: OutboundConfig & {
    password?: string;
}, options?: {
    account?: Account;
}): Promise<OutboundConfig>;
/**
 * List all outbound SIP configs available to an account.
 *
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 *
 * @returns a dictionary of {@link OutboundConfig} objects by their name
 */
export declare function listConfigs(options?: {
    account?: Account;
}): Promise<{
    [name: string]: OutboundConfig;
}>;
/**
 * Update an outbound SIP config. Pass `null` in the optional fields to reset to defaults.
 *
 * @param patch see {@link OutboundConfig}
 * @param patch.password authorization password, if one is needed
 * @param options.account an account to use; if not set,
 *   defaults to the {@link getCurrentAccountName | current account}
 *
 * @returns an updated config
 */
export declare function updateConfig(name: string, patch: {
    server?: string | null;
    domain?: string | null;
    transport?: "tcp" | "udp" | null;
    account?: string | null;
    password?: string | null;
}, options?: {
    account?: Account;
}): Promise<OutboundConfig>;
