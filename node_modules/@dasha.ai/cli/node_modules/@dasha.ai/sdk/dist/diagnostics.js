"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getQueueStates = exports.getLimits = void 0;
const account_1 = require("./account");
const log_1 = require("./log");
const rest = require("./rest-api");
function getLimits(options) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (yield account_1._getEffectiveAccount({ _log: log_1.log }));
        const log = log_1.log.child({ account: account_1.anonymizeAccount(account) });
        const api = new rest.DiagnosticsApi(account, log);
        return yield api.getLimits();
    });
}
exports.getLimits = getLimits;
function getQueueStates(options) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        const account = (_a = options === null || options === void 0 ? void 0 : options.account) !== null && _a !== void 0 ? _a : (yield account_1._getEffectiveAccount({ _log: log_1.log }));
        const log = log_1.log.child({ account: account_1.anonymizeAccount(account) });
        const api = new rest.DiagnosticsApi(account, log);
        return yield api.getQueueStates();
    });
}
exports.getQueueStates = getQueueStates;
//# sourceMappingURL=diagnostics.js.map