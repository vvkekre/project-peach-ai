/**
 * All errors thrown by the Dasha SDK are subclasses of the base {@link Error} class.
 *
 * @module
 */
export declare class Error extends globalThis.Error {
    reason?: globalThis.Error | undefined;
    name: string;
    constructor(message?: string, reason?: globalThis.Error | undefined);
}
export declare class AccountExistsError extends Error {
    accountName: string;
    name: string;
    constructor(accountName: string);
}
export declare class AccountNotFoundError extends Error {
    accountName: string;
    name: string;
    constructor(accountName: string);
}
export declare class ArgumentError extends Error {
    name: string;
    constructor(message: string);
}
export declare class AudioError extends Error {
    name: string;
    constructor(message: string);
}
export declare class AuthenticationError extends Error {
    name: string;
    constructor();
}
export declare class CancelError extends Error {
    name: string;
    constructor();
}
export declare class ConnectionError extends Error {
    internalMessage?: string | undefined;
    reason?: globalThis.Error | undefined;
    reconnectable: boolean;
    name: string;
    constructor(internalMessage?: string | undefined, reason?: globalThis.Error | undefined, reconnectable?: boolean);
}
export declare class ConnectionProviderError extends Error {
    reason: globalThis.Error;
    name: string;
    constructor(reason: globalThis.Error);
}
export declare class ConversationError extends Error {
    data: Record<string, unknown>;
    name: string;
    constructor(data: Record<string, unknown>);
}
export declare class ConversationRejectedError extends Error {
    data: Record<string, unknown>;
    name: string;
    constructor(data: Record<string, unknown>);
}
export declare class CustomTtsProviderError extends Error {
    reason: globalThis.Error;
    name: string;
    constructor(reason: globalThis.Error);
}
export declare class DeploymentError extends Error {
    code: number;
    name: string;
    constructor(code: number, message: string);
}
export declare class ExternalNotFoundError extends Error {
    method: string;
    name: string;
    constructor(method: string);
}
export declare class ExternalResultNotSerializableError extends Error {
    method: string;
    name: string;
    constructor(method: string);
}
export declare class FileSystemError extends Error {
    reason: globalThis.Error;
    name: string;
    constructor(reason: globalThis.Error);
}
export declare class GroupExistsError extends Error {
    groupName: string;
    name: string;
    constructor(groupName: string);
}
export declare class GroupNotFoundError extends Error {
    groupName: string;
    name: string;
    constructor(groupName: string);
}
export declare class InternalError extends Error {
    internalMessage?: string | undefined;
    reason?: globalThis.Error | undefined;
    name: string;
    constructor(internalMessage?: string | undefined, reason?: globalThis.Error | undefined);
}
export declare class NotImplementedError extends Error {
    name: string;
    constructor(message?: string);
}
export declare class OptionalDependencyNotFoundError extends Error {
    importPath: string;
    name: string;
    constructor(importPath: string);
}
export declare class SipConfigExistsError extends Error {
    configName: string;
    name: string;
    constructor(configName: string);
}
export declare class SipConfigNotFoundError extends Error {
    configName: string;
    name: string;
    constructor(configName: string);
}
export declare class SttDispatcherError extends Error {
    reason: globalThis.Error;
    name: string;
    constructor(reason: globalThis.Error);
}
export declare class TimeoutError extends Error {
    name: string;
    constructor(message: string);
}
export declare class TtsDispatcherError extends Error {
    reason: globalThis.Error;
    name: string;
    constructor(reason: globalThis.Error);
}
