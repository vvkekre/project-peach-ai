import { Conversation } from "./conversation";
/**
 * A callback that decides the type of {@link Connection} used by each conversation.
 *
 * @see {@link Application.connectionProvider}
 *
 * @example using SIP through an {@link Endpoint}
 * ```typescript
 * const endpoint = new dasha.sip.Endpoint();
 * application.connectionProvider = () => await dasha.sip.connect(endpoint);
 * ```
 *
 * @example running a {@link ConsoleChat}
 * ```typescript
 * const chat = await dasha.chat.createConsoleChat();
 * application.connectionProvider = () => await dasha.chat.connect(chat);
 * ```
 *
 * @example deciding on a connection type based on the {@link Conversation.input}
 * ```typescript
 * application.connectionProvider = (conversation) =>
 *   conversation.input.useChat
 *     ? await dasha.chat.connect(chat)
 *     : await dasha.sip.connect(endpoint);
 * ```
 */
export declare type ConnectionProvider<TInput extends Record<string, unknown>, TOutput extends Record<string, unknown>> = (conv: Conversation<TInput, TOutput>) => Connection | Promise<Connection>;
/**
 * A connection object to return from a {@link ConnectionProvider}.
 */
export interface Connection {
}
