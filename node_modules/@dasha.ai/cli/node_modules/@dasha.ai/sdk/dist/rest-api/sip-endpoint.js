"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SipEndpointApi = void 0;
const errors = require("../errors");
const log_1 = require("../log");
const base = require("./base");
const api = require("./generated/api");
class SipEndpointApi extends base.Api {
    constructor(account, log) {
        super(api.SIPEndpointApi, account, log);
    }
    deleteConfig(name, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const getResponse = yield this.api.apiV1SipEndpointByNameGet(name, {
                validateStatus: (status) => status < 400 || status === 404,
            });
            if (getResponse.status === 404) {
                if (!(options === null || options === void 0 ? void 0 : options.quiet))
                    log_1.logAndThrow(this.log, new errors.SipConfigNotFoundError(name));
                return;
            }
            yield this.api.apiV1SipEndpointIdDelete(getResponse.data.id, {
                validateStatus: (status) => status < 400,
            });
        });
    }
    createConfig(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.api.apiV1SipEndpointPost(request, {
                validateStatus: (status) => status < 400 || status === 409,
            });
            if (response.status === 409) {
                log_1.logAndThrow(this.log, new errors.SipConfigExistsError(request.name));
            }
            return response.data;
        });
    }
    getConfigByName(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.api.apiV1SipEndpointByNameGet(name, {
                validateStatus: (status) => status < 400 || status === 404,
            });
            if (response.status === 404) {
                log_1.logAndThrow(this.log, new errors.SipConfigNotFoundError(name));
            }
            return response.data;
        });
    }
    listConfigs() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.api.apiV1SipEndpointGet(undefined, // skip
            undefined, // take
            {
                validateStatus: (status) => status < 400,
            });
            return response.data;
        });
    }
    updateConfig(name, request) {
        return __awaiter(this, void 0, void 0, function* () {
            const getResponse = yield this.api.apiV1SipEndpointByNameGet(name, {
                validateStatus: (status) => status < 400 || status === 404,
            });
            if (getResponse.status === 404) {
                log_1.logAndThrow(this.log, new errors.SipConfigNotFoundError(name));
            }
            const patchResponse = yield this.api.apiV1SipEndpointIdPatch(getResponse.data.id, request, {
                validateStatus: (status) => status < 400,
            });
            return patchResponse.data;
        });
    }
}
exports.SipEndpointApi = SipEndpointApi;
//# sourceMappingURL=sip-endpoint.js.map