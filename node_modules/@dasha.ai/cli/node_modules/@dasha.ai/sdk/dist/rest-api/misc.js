"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MiscApi = void 0;
const errors = require("../errors");
const base = require("./base");
const api = require("./generated/api");
class MiscApi extends base.Api {
    constructor(account, log) {
        super(api.MiscApi, account, log);
        // it is not convenient to make auth logic optional in the base class
        // for just these methods
        delete this.axios.defaults.headers["Authorization"];
        this.axios.defaults.baseURL = (account.insecure ? "http://" : "https://") + account.server;
    }
    getAuthServerUrl() {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.api.apiV1MiscAuthServerGet({
                validateStatus: (status) => status < 400,
            });
            return response.data;
        });
    }
    startTrial() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const authServerUrl = yield this.getAuthServerUrl();
            // no use generating openapi boilerplate for this one method of the auth service
            const response = yield this.axios.get("/api/account/trial", {
                baseURL: authServerUrl,
                responseType: "json",
                validateStatus: (status) => status < 400,
            });
            const apiKey = (_a = response.data) === null || _a === void 0 ? void 0 : _a.accessToken;
            if (typeof apiKey !== "string")
                throw new errors.InternalError();
            return { apiKey };
        });
    }
    // TODO: consider properly merging this api with the REST (get it? :)
    getAudioClientAuthToken(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const { customerId, applicationName, groupId } = request;
            const response = yield this.axios.post("/api/v1/audio/auth", { customerId, applicationName, groupId }, {
                responseType: "text",
                validateStatus: (status) => status < 400,
            });
            return response.data;
        });
    }
}
exports.MiscApi = MiscApi;
//# sourceMappingURL=misc.js.map