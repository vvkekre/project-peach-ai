"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Api = void 0;
const axios_1 = require("axios");
const errors = require("../errors");
const account_1 = require("../account");
const log_1 = require("../log");
const configuration_1 = require("./generated/configuration");
class Api {
    constructor(ApiConstructor, account, log) {
        this.log = log;
        this.axios = axios_1.default.create({
            headers: {
                Authorization: `Bearer ${account.apiKey}`,
            },
        });
        this.axios.interceptors.response.use(undefined, (error) => {
            if (axios_1.default.isAxiosError(error)) {
                // handle some common error reasons
                if (error.request === undefined) {
                    // could not make a request
                    return Promise.reject(log_1.logAndReturn(this.log, new errors.ConnectionError(error.message, error)));
                }
                if (error.response === undefined) {
                    // did not receive a response
                    return Promise.reject(log_1.logAndReturn(this.log, new errors.ConnectionError(error.message, error)));
                }
                if (error.response.status === 403) {
                    // 403 Forbidden
                    return Promise.reject(log_1.logAndReturn(this.log, new errors.AuthenticationError()));
                }
            }
            return Promise.reject(log_1.logAndReturn(this.log, new errors.InternalError(error.message, error)));
        });
        const config = new configuration_1.Configuration({
            basePath: account_1.getBaseHttpUrl(account),
        });
        this.api = new ApiConstructor(config, undefined, this.axios);
    }
}
exports.Api = Api;
//# sourceMappingURL=base.js.map