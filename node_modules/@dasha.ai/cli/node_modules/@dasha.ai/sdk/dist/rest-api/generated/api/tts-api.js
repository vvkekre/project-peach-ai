"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Dasha.AI Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TtsApi = exports.TtsApiFactory = exports.TtsApiFp = exports.TtsApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * TtsApi - axios parameter creator
 * @export
 */
const TtsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsEntriesIdDelete: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('apiV1ManagementTtsEntriesIdDelete', 'id', id);
            const localVarPath = `/api/v1/management/tts/entries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsEntriesIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('apiV1ManagementTtsEntriesIdGet', 'id', id);
            const localVarPath = `/api/v1/management/tts/entries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {TtsEntryPatchDTO} [ttsEntryPatchDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsEntriesIdPatch: (id, ttsEntryPatchDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('apiV1ManagementTtsEntriesIdPatch', 'id', id);
            const localVarPath = `/api/v1/management/tts/entries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(ttsEntryPatchDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {TtsEntryRequestDTO} [ttsEntryRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsEntriesPost: (ttsEntryRequestDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/v1/management/tts/entries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(ttsEntryRequestDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {TtsEntryWeightRequestDTO} [ttsEntryWeightRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsEntriesWeightPost: (ttsEntryWeightRequestDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/v1/management/tts/entries/weight`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(ttsEntryWeightRequestDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {Array<string>} [names]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsGet: (names, skip, take, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/v1/management/tts/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            if (names) {
                localVarQueryParameter['names'] = names;
            }
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsIdDelete: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('apiV1ManagementTtsGroupsIdDelete', 'id', id);
            const localVarPath = `/api/v1/management/tts/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsIdEntriesGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('apiV1ManagementTtsGroupsIdEntriesGet', 'id', id);
            const localVarPath = `/api/v1/management/tts/groups/{id}/entries`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('apiV1ManagementTtsGroupsIdGet', 'id', id);
            const localVarPath = `/api/v1/management/tts/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {TtsGroupPatchDTO} [ttsGroupPatchDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsIdPatch: (id, ttsGroupPatchDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('apiV1ManagementTtsGroupsIdPatch', 'id', id);
            const localVarPath = `/api/v1/management/tts/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(ttsGroupPatchDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {TtsGroupRequestDTO} [ttsGroupRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsPost: (ttsGroupRequestDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/v1/management/tts/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(ttsGroupRequestDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} customerId
         * @param {string} ttsGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessDelete: (customerId, ttsGroupId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            common_1.assertParamExists('apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessDelete', 'customerId', customerId);
            // verify required parameter 'ttsGroupId' is not null or undefined
            common_1.assertParamExists('apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessDelete', 'ttsGroupId', ttsGroupId);
            const localVarPath = `/api/v1/management/tts/groups/{ttsGroupId}/customers/{customerId}/access`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"ttsGroupId"}}`, encodeURIComponent(String(ttsGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} customerId
         * @param {string} ttsGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessGet: (customerId, ttsGroupId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            common_1.assertParamExists('apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessGet', 'customerId', customerId);
            // verify required parameter 'ttsGroupId' is not null or undefined
            common_1.assertParamExists('apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessGet', 'ttsGroupId', ttsGroupId);
            const localVarPath = `/api/v1/management/tts/groups/{ttsGroupId}/customers/{customerId}/access`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"ttsGroupId"}}`, encodeURIComponent(String(ttsGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} customerId
         * @param {string} ttsGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessPost: (customerId, ttsGroupId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            common_1.assertParamExists('apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessPost', 'customerId', customerId);
            // verify required parameter 'ttsGroupId' is not null or undefined
            common_1.assertParamExists('apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessPost', 'ttsGroupId', ttsGroupId);
            const localVarPath = `/api/v1/management/tts/groups/{ttsGroupId}/customers/{customerId}/access`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"ttsGroupId"}}`, encodeURIComponent(String(ttsGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} ttsGroupId
         * @param {string} ttsEntryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightDelete: (ttsGroupId, ttsEntryId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ttsGroupId' is not null or undefined
            common_1.assertParamExists('apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightDelete', 'ttsGroupId', ttsGroupId);
            // verify required parameter 'ttsEntryId' is not null or undefined
            common_1.assertParamExists('apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightDelete', 'ttsEntryId', ttsEntryId);
            const localVarPath = `/api/v1/management/tts/groups/{ttsGroupId}/entries/{ttsEntryId}/weight`
                .replace(`{${"ttsGroupId"}}`, encodeURIComponent(String(ttsGroupId)))
                .replace(`{${"ttsEntryId"}}`, encodeURIComponent(String(ttsEntryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} ttsGroupId
         * @param {string} ttsEntryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightGet: (ttsGroupId, ttsEntryId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ttsGroupId' is not null or undefined
            common_1.assertParamExists('apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightGet', 'ttsGroupId', ttsGroupId);
            // verify required parameter 'ttsEntryId' is not null or undefined
            common_1.assertParamExists('apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightGet', 'ttsEntryId', ttsEntryId);
            const localVarPath = `/api/v1/management/tts/groups/{ttsGroupId}/entries/{ttsEntryId}/weight`
                .replace(`{${"ttsGroupId"}}`, encodeURIComponent(String(ttsGroupId)))
                .replace(`{${"ttsEntryId"}}`, encodeURIComponent(String(ttsEntryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} ttsGroupId
         * @param {string} ttsEntryId
         * @param {TtsEntryWeightPatchDTO} [ttsEntryWeightPatchDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightPatch: (ttsGroupId, ttsEntryId, ttsEntryWeightPatchDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'ttsGroupId' is not null or undefined
            common_1.assertParamExists('apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightPatch', 'ttsGroupId', ttsGroupId);
            // verify required parameter 'ttsEntryId' is not null or undefined
            common_1.assertParamExists('apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightPatch', 'ttsEntryId', ttsEntryId);
            const localVarPath = `/api/v1/management/tts/groups/{ttsGroupId}/entries/{ttsEntryId}/weight`
                .replace(`{${"ttsGroupId"}}`, encodeURIComponent(String(ttsGroupId)))
                .replace(`{${"ttsEntryId"}}`, encodeURIComponent(String(ttsEntryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(ttsEntryWeightPatchDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {Array<string>} [names]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsGroupsGet: (names, skip, take, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/v1/tts/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            if (names) {
                localVarQueryParameter['names'] = names;
            }
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsGroupsIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('apiV1TtsGroupsIdGet', 'id', id);
            const localVarPath = `/api/v1/tts/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {TtsSynthesisRequestDTO} [ttsSynthesisRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsSynthesisPost: (ttsSynthesisRequestDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/v1/tts/synthesis`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(ttsSynthesisRequestDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.TtsApiAxiosParamCreator = TtsApiAxiosParamCreator;
/**
 * TtsApi - functional programming interface
 * @export
 */
const TtsApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.TtsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsEntriesIdDelete(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementTtsEntriesIdDelete(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsEntriesIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementTtsEntriesIdGet(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {TtsEntryPatchDTO} [ttsEntryPatchDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsEntriesIdPatch(id, ttsEntryPatchDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementTtsEntriesIdPatch(id, ttsEntryPatchDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {TtsEntryRequestDTO} [ttsEntryRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsEntriesPost(ttsEntryRequestDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementTtsEntriesPost(ttsEntryRequestDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {TtsEntryWeightRequestDTO} [ttsEntryWeightRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsEntriesWeightPost(ttsEntryWeightRequestDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementTtsEntriesWeightPost(ttsEntryWeightRequestDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {Array<string>} [names]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsGet(names, skip, take, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementTtsGroupsGet(names, skip, take, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsIdDelete(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementTtsGroupsIdDelete(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsIdEntriesGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementTtsGroupsIdEntriesGet(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementTtsGroupsIdGet(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {TtsGroupPatchDTO} [ttsGroupPatchDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsIdPatch(id, ttsGroupPatchDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementTtsGroupsIdPatch(id, ttsGroupPatchDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {TtsGroupRequestDTO} [ttsGroupRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsPost(ttsGroupRequestDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementTtsGroupsPost(ttsGroupRequestDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} customerId
         * @param {string} ttsGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessDelete(customerId, ttsGroupId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessDelete(customerId, ttsGroupId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} customerId
         * @param {string} ttsGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessGet(customerId, ttsGroupId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessGet(customerId, ttsGroupId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} customerId
         * @param {string} ttsGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessPost(customerId, ttsGroupId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessPost(customerId, ttsGroupId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} ttsGroupId
         * @param {string} ttsEntryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightDelete(ttsGroupId, ttsEntryId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightDelete(ttsGroupId, ttsEntryId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} ttsGroupId
         * @param {string} ttsEntryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightGet(ttsGroupId, ttsEntryId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightGet(ttsGroupId, ttsEntryId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} ttsGroupId
         * @param {string} ttsEntryId
         * @param {TtsEntryWeightPatchDTO} [ttsEntryWeightPatchDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightPatch(ttsGroupId, ttsEntryId, ttsEntryWeightPatchDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightPatch(ttsGroupId, ttsEntryId, ttsEntryWeightPatchDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {Array<string>} [names]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsGroupsGet(names, skip, take, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1TtsGroupsGet(names, skip, take, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsGroupsIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1TtsGroupsIdGet(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {TtsSynthesisRequestDTO} [ttsSynthesisRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsSynthesisPost(ttsSynthesisRequestDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1TtsSynthesisPost(ttsSynthesisRequestDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.TtsApiFp = TtsApiFp;
/**
 * TtsApi - factory interface
 * @export
 */
const TtsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.TtsApiFp(configuration);
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsEntriesIdDelete(id, options) {
            return localVarFp.apiV1ManagementTtsEntriesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsEntriesIdGet(id, options) {
            return localVarFp.apiV1ManagementTtsEntriesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {TtsEntryPatchDTO} [ttsEntryPatchDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsEntriesIdPatch(id, ttsEntryPatchDTO, options) {
            return localVarFp.apiV1ManagementTtsEntriesIdPatch(id, ttsEntryPatchDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {TtsEntryRequestDTO} [ttsEntryRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsEntriesPost(ttsEntryRequestDTO, options) {
            return localVarFp.apiV1ManagementTtsEntriesPost(ttsEntryRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {TtsEntryWeightRequestDTO} [ttsEntryWeightRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsEntriesWeightPost(ttsEntryWeightRequestDTO, options) {
            return localVarFp.apiV1ManagementTtsEntriesWeightPost(ttsEntryWeightRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {Array<string>} [names]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsGet(names, skip, take, options) {
            return localVarFp.apiV1ManagementTtsGroupsGet(names, skip, take, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsIdDelete(id, options) {
            return localVarFp.apiV1ManagementTtsGroupsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsIdEntriesGet(id, options) {
            return localVarFp.apiV1ManagementTtsGroupsIdEntriesGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsIdGet(id, options) {
            return localVarFp.apiV1ManagementTtsGroupsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {TtsGroupPatchDTO} [ttsGroupPatchDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsIdPatch(id, ttsGroupPatchDTO, options) {
            return localVarFp.apiV1ManagementTtsGroupsIdPatch(id, ttsGroupPatchDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {TtsGroupRequestDTO} [ttsGroupRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsPost(ttsGroupRequestDTO, options) {
            return localVarFp.apiV1ManagementTtsGroupsPost(ttsGroupRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} customerId
         * @param {string} ttsGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessDelete(customerId, ttsGroupId, options) {
            return localVarFp.apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessDelete(customerId, ttsGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} customerId
         * @param {string} ttsGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessGet(customerId, ttsGroupId, options) {
            return localVarFp.apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessGet(customerId, ttsGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} customerId
         * @param {string} ttsGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessPost(customerId, ttsGroupId, options) {
            return localVarFp.apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessPost(customerId, ttsGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} ttsGroupId
         * @param {string} ttsEntryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightDelete(ttsGroupId, ttsEntryId, options) {
            return localVarFp.apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightDelete(ttsGroupId, ttsEntryId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} ttsGroupId
         * @param {string} ttsEntryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightGet(ttsGroupId, ttsEntryId, options) {
            return localVarFp.apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightGet(ttsGroupId, ttsEntryId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} ttsGroupId
         * @param {string} ttsEntryId
         * @param {TtsEntryWeightPatchDTO} [ttsEntryWeightPatchDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightPatch(ttsGroupId, ttsEntryId, ttsEntryWeightPatchDTO, options) {
            return localVarFp.apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightPatch(ttsGroupId, ttsEntryId, ttsEntryWeightPatchDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {Array<string>} [names]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsGroupsGet(names, skip, take, options) {
            return localVarFp.apiV1TtsGroupsGet(names, skip, take, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsGroupsIdGet(id, options) {
            return localVarFp.apiV1TtsGroupsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {TtsSynthesisRequestDTO} [ttsSynthesisRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1TtsSynthesisPost(ttsSynthesisRequestDTO, options) {
            return localVarFp.apiV1TtsSynthesisPost(ttsSynthesisRequestDTO, options).then((request) => request(axios, basePath));
        },
    };
};
exports.TtsApiFactory = TtsApiFactory;
/**
 * TtsApi - object-oriented interface
 * @export
 * @class TtsApi
 * @extends {BaseAPI}
 */
class TtsApi extends base_1.BaseAPI {
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1ManagementTtsEntriesIdDelete(id, options) {
        return exports.TtsApiFp(this.configuration).apiV1ManagementTtsEntriesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1ManagementTtsEntriesIdGet(id, options) {
        return exports.TtsApiFp(this.configuration).apiV1ManagementTtsEntriesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {TtsEntryPatchDTO} [ttsEntryPatchDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1ManagementTtsEntriesIdPatch(id, ttsEntryPatchDTO, options) {
        return exports.TtsApiFp(this.configuration).apiV1ManagementTtsEntriesIdPatch(id, ttsEntryPatchDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {TtsEntryRequestDTO} [ttsEntryRequestDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1ManagementTtsEntriesPost(ttsEntryRequestDTO, options) {
        return exports.TtsApiFp(this.configuration).apiV1ManagementTtsEntriesPost(ttsEntryRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {TtsEntryWeightRequestDTO} [ttsEntryWeightRequestDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1ManagementTtsEntriesWeightPost(ttsEntryWeightRequestDTO, options) {
        return exports.TtsApiFp(this.configuration).apiV1ManagementTtsEntriesWeightPost(ttsEntryWeightRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {Array<string>} [names]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1ManagementTtsGroupsGet(names, skip, take, options) {
        return exports.TtsApiFp(this.configuration).apiV1ManagementTtsGroupsGet(names, skip, take, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1ManagementTtsGroupsIdDelete(id, options) {
        return exports.TtsApiFp(this.configuration).apiV1ManagementTtsGroupsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1ManagementTtsGroupsIdEntriesGet(id, options) {
        return exports.TtsApiFp(this.configuration).apiV1ManagementTtsGroupsIdEntriesGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1ManagementTtsGroupsIdGet(id, options) {
        return exports.TtsApiFp(this.configuration).apiV1ManagementTtsGroupsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {TtsGroupPatchDTO} [ttsGroupPatchDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1ManagementTtsGroupsIdPatch(id, ttsGroupPatchDTO, options) {
        return exports.TtsApiFp(this.configuration).apiV1ManagementTtsGroupsIdPatch(id, ttsGroupPatchDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {TtsGroupRequestDTO} [ttsGroupRequestDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1ManagementTtsGroupsPost(ttsGroupRequestDTO, options) {
        return exports.TtsApiFp(this.configuration).apiV1ManagementTtsGroupsPost(ttsGroupRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} customerId
     * @param {string} ttsGroupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessDelete(customerId, ttsGroupId, options) {
        return exports.TtsApiFp(this.configuration).apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessDelete(customerId, ttsGroupId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} customerId
     * @param {string} ttsGroupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessGet(customerId, ttsGroupId, options) {
        return exports.TtsApiFp(this.configuration).apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessGet(customerId, ttsGroupId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} customerId
     * @param {string} ttsGroupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessPost(customerId, ttsGroupId, options) {
        return exports.TtsApiFp(this.configuration).apiV1ManagementTtsGroupsTtsGroupIdCustomersCustomerIdAccessPost(customerId, ttsGroupId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} ttsGroupId
     * @param {string} ttsEntryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightDelete(ttsGroupId, ttsEntryId, options) {
        return exports.TtsApiFp(this.configuration).apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightDelete(ttsGroupId, ttsEntryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} ttsGroupId
     * @param {string} ttsEntryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightGet(ttsGroupId, ttsEntryId, options) {
        return exports.TtsApiFp(this.configuration).apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightGet(ttsGroupId, ttsEntryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} ttsGroupId
     * @param {string} ttsEntryId
     * @param {TtsEntryWeightPatchDTO} [ttsEntryWeightPatchDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightPatch(ttsGroupId, ttsEntryId, ttsEntryWeightPatchDTO, options) {
        return exports.TtsApiFp(this.configuration).apiV1ManagementTtsGroupsTtsGroupIdEntriesTtsEntryIdWeightPatch(ttsGroupId, ttsEntryId, ttsEntryWeightPatchDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {Array<string>} [names]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1TtsGroupsGet(names, skip, take, options) {
        return exports.TtsApiFp(this.configuration).apiV1TtsGroupsGet(names, skip, take, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1TtsGroupsIdGet(id, options) {
        return exports.TtsApiFp(this.configuration).apiV1TtsGroupsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {TtsSynthesisRequestDTO} [ttsSynthesisRequestDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TtsApi
     */
    apiV1TtsSynthesisPost(ttsSynthesisRequestDTO, options) {
        return exports.TtsApiFp(this.configuration).apiV1TtsSynthesisPost(ttsSynthesisRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.TtsApi = TtsApi;
//# sourceMappingURL=tts-api.js.map