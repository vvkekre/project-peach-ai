"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TtsApi = void 0;
const base = require("./base");
const api = require("./generated/api");
class TtsApi extends base.Api {
    constructor(account, log) {
        super(api.TtsApi, account, log);
    }
    synthesize(request) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.api.apiV1TtsSynthesisPost(request, {
                validateStatus: (status) => status < 400,
                responseType: "arraybuffer",
            });
            // TODO: how to tell the schema/code generators to return a proper type?
            return new Uint8Array(response.data);
        });
    }
}
exports.TtsApi = TtsApi;
//# sourceMappingURL=tts.js.map