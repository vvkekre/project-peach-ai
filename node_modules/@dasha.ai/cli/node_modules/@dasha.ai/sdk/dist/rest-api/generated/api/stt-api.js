"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Dasha.AI Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SttApi = exports.SttApiFactory = exports.SttApiFp = exports.SttApiAxiosParamCreator = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * SttApi - axios parameter creator
 * @export
 */
const SttApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttEntriesIdDelete: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('apiV1ManagementSttEntriesIdDelete', 'id', id);
            const localVarPath = `/api/v1/management/stt/entries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttEntriesIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('apiV1ManagementSttEntriesIdGet', 'id', id);
            const localVarPath = `/api/v1/management/stt/entries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {SttEntryPatchDTO} [sttEntryPatchDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttEntriesIdPatch: (id, sttEntryPatchDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('apiV1ManagementSttEntriesIdPatch', 'id', id);
            const localVarPath = `/api/v1/management/stt/entries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(sttEntryPatchDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {SttEntryRequestDTO} [sttEntryRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttEntriesPost: (sttEntryRequestDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/v1/management/stt/entries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(sttEntryRequestDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {SttEntryWeightRequestDTO} [sttEntryWeightRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttEntriesWeightPost: (sttEntryWeightRequestDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/v1/management/stt/entries/weight`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(sttEntryWeightRequestDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {Array<string>} [names]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsGet: (names, skip, take, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/v1/management/stt/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            if (names) {
                localVarQueryParameter['names'] = names;
            }
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsIdDelete: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('apiV1ManagementSttGroupsIdDelete', 'id', id);
            const localVarPath = `/api/v1/management/stt/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsIdEntriesGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('apiV1ManagementSttGroupsIdEntriesGet', 'id', id);
            const localVarPath = `/api/v1/management/stt/groups/{id}/entries`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('apiV1ManagementSttGroupsIdGet', 'id', id);
            const localVarPath = `/api/v1/management/stt/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {SttGroupPatchDTO} [sttGroupPatchDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsIdPatch: (id, sttGroupPatchDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('apiV1ManagementSttGroupsIdPatch', 'id', id);
            const localVarPath = `/api/v1/management/stt/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(sttGroupPatchDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {SttGroupRequestDTO} [sttGroupRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsPost: (sttGroupRequestDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/v1/management/stt/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(sttGroupRequestDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} customerId
         * @param {string} sttGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessDelete: (customerId, sttGroupId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            common_1.assertParamExists('apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessDelete', 'customerId', customerId);
            // verify required parameter 'sttGroupId' is not null or undefined
            common_1.assertParamExists('apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessDelete', 'sttGroupId', sttGroupId);
            const localVarPath = `/api/v1/management/stt/groups/{sttGroupId}/customers/{customerId}/access`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"sttGroupId"}}`, encodeURIComponent(String(sttGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} customerId
         * @param {string} sttGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessGet: (customerId, sttGroupId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            common_1.assertParamExists('apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessGet', 'customerId', customerId);
            // verify required parameter 'sttGroupId' is not null or undefined
            common_1.assertParamExists('apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessGet', 'sttGroupId', sttGroupId);
            const localVarPath = `/api/v1/management/stt/groups/{sttGroupId}/customers/{customerId}/access`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"sttGroupId"}}`, encodeURIComponent(String(sttGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} customerId
         * @param {string} sttGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessPost: (customerId, sttGroupId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'customerId' is not null or undefined
            common_1.assertParamExists('apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessPost', 'customerId', customerId);
            // verify required parameter 'sttGroupId' is not null or undefined
            common_1.assertParamExists('apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessPost', 'sttGroupId', sttGroupId);
            const localVarPath = `/api/v1/management/stt/groups/{sttGroupId}/customers/{customerId}/access`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId)))
                .replace(`{${"sttGroupId"}}`, encodeURIComponent(String(sttGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} sttGroupId
         * @param {string} sttEntryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightDelete: (sttGroupId, sttEntryId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'sttGroupId' is not null or undefined
            common_1.assertParamExists('apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightDelete', 'sttGroupId', sttGroupId);
            // verify required parameter 'sttEntryId' is not null or undefined
            common_1.assertParamExists('apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightDelete', 'sttEntryId', sttEntryId);
            const localVarPath = `/api/v1/management/stt/groups/{sttGroupId}/entries/{sttEntryId}/weight`
                .replace(`{${"sttGroupId"}}`, encodeURIComponent(String(sttGroupId)))
                .replace(`{${"sttEntryId"}}`, encodeURIComponent(String(sttEntryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} sttGroupId
         * @param {string} sttEntryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightGet: (sttGroupId, sttEntryId, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'sttGroupId' is not null or undefined
            common_1.assertParamExists('apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightGet', 'sttGroupId', sttGroupId);
            // verify required parameter 'sttEntryId' is not null or undefined
            common_1.assertParamExists('apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightGet', 'sttEntryId', sttEntryId);
            const localVarPath = `/api/v1/management/stt/groups/{sttGroupId}/entries/{sttEntryId}/weight`
                .replace(`{${"sttGroupId"}}`, encodeURIComponent(String(sttGroupId)))
                .replace(`{${"sttEntryId"}}`, encodeURIComponent(String(sttEntryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} sttGroupId
         * @param {string} sttEntryId
         * @param {SttEntryWeightPatchDTO} [sttEntryWeightPatchDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightPatch: (sttGroupId, sttEntryId, sttEntryWeightPatchDTO, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'sttGroupId' is not null or undefined
            common_1.assertParamExists('apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightPatch', 'sttGroupId', sttGroupId);
            // verify required parameter 'sttEntryId' is not null or undefined
            common_1.assertParamExists('apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightPatch', 'sttEntryId', sttEntryId);
            const localVarPath = `/api/v1/management/stt/groups/{sttGroupId}/entries/{sttEntryId}/weight`
                .replace(`{${"sttGroupId"}}`, encodeURIComponent(String(sttGroupId)))
                .replace(`{${"sttEntryId"}}`, encodeURIComponent(String(sttEntryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(sttEntryWeightPatchDTO, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {Array<string>} [names]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SttGroupsGet: (names, skip, take, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/api/v1/stt/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            if (names) {
                localVarQueryParameter['names'] = names;
            }
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SttGroupsIdGet: (id, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('apiV1SttGroupsIdGet', 'id', id);
            const localVarPath = `/api/v1/stt/groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            yield common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            yield common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.SttApiAxiosParamCreator = SttApiAxiosParamCreator;
/**
 * SttApi - functional programming interface
 * @export
 */
const SttApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.SttApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttEntriesIdDelete(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementSttEntriesIdDelete(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttEntriesIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementSttEntriesIdGet(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {SttEntryPatchDTO} [sttEntryPatchDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttEntriesIdPatch(id, sttEntryPatchDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementSttEntriesIdPatch(id, sttEntryPatchDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {SttEntryRequestDTO} [sttEntryRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttEntriesPost(sttEntryRequestDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementSttEntriesPost(sttEntryRequestDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {SttEntryWeightRequestDTO} [sttEntryWeightRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttEntriesWeightPost(sttEntryWeightRequestDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementSttEntriesWeightPost(sttEntryWeightRequestDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {Array<string>} [names]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsGet(names, skip, take, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementSttGroupsGet(names, skip, take, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsIdDelete(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementSttGroupsIdDelete(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsIdEntriesGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementSttGroupsIdEntriesGet(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementSttGroupsIdGet(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {SttGroupPatchDTO} [sttGroupPatchDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsIdPatch(id, sttGroupPatchDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementSttGroupsIdPatch(id, sttGroupPatchDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {SttGroupRequestDTO} [sttGroupRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsPost(sttGroupRequestDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementSttGroupsPost(sttGroupRequestDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} customerId
         * @param {string} sttGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessDelete(customerId, sttGroupId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessDelete(customerId, sttGroupId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} customerId
         * @param {string} sttGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessGet(customerId, sttGroupId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessGet(customerId, sttGroupId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} customerId
         * @param {string} sttGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessPost(customerId, sttGroupId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessPost(customerId, sttGroupId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} sttGroupId
         * @param {string} sttEntryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightDelete(sttGroupId, sttEntryId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightDelete(sttGroupId, sttEntryId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} sttGroupId
         * @param {string} sttEntryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightGet(sttGroupId, sttEntryId, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightGet(sttGroupId, sttEntryId, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} sttGroupId
         * @param {string} sttEntryId
         * @param {SttEntryWeightPatchDTO} [sttEntryWeightPatchDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightPatch(sttGroupId, sttEntryId, sttEntryWeightPatchDTO, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightPatch(sttGroupId, sttEntryId, sttEntryWeightPatchDTO, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {Array<string>} [names]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SttGroupsGet(names, skip, take, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1SttGroupsGet(names, skip, take, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SttGroupsIdGet(id, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.apiV1SttGroupsIdGet(id, options);
                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.SttApiFp = SttApiFp;
/**
 * SttApi - factory interface
 * @export
 */
const SttApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.SttApiFp(configuration);
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttEntriesIdDelete(id, options) {
            return localVarFp.apiV1ManagementSttEntriesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttEntriesIdGet(id, options) {
            return localVarFp.apiV1ManagementSttEntriesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {SttEntryPatchDTO} [sttEntryPatchDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttEntriesIdPatch(id, sttEntryPatchDTO, options) {
            return localVarFp.apiV1ManagementSttEntriesIdPatch(id, sttEntryPatchDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {SttEntryRequestDTO} [sttEntryRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttEntriesPost(sttEntryRequestDTO, options) {
            return localVarFp.apiV1ManagementSttEntriesPost(sttEntryRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {SttEntryWeightRequestDTO} [sttEntryWeightRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttEntriesWeightPost(sttEntryWeightRequestDTO, options) {
            return localVarFp.apiV1ManagementSttEntriesWeightPost(sttEntryWeightRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {Array<string>} [names]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsGet(names, skip, take, options) {
            return localVarFp.apiV1ManagementSttGroupsGet(names, skip, take, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsIdDelete(id, options) {
            return localVarFp.apiV1ManagementSttGroupsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsIdEntriesGet(id, options) {
            return localVarFp.apiV1ManagementSttGroupsIdEntriesGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsIdGet(id, options) {
            return localVarFp.apiV1ManagementSttGroupsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {SttGroupPatchDTO} [sttGroupPatchDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsIdPatch(id, sttGroupPatchDTO, options) {
            return localVarFp.apiV1ManagementSttGroupsIdPatch(id, sttGroupPatchDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {SttGroupRequestDTO} [sttGroupRequestDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsPost(sttGroupRequestDTO, options) {
            return localVarFp.apiV1ManagementSttGroupsPost(sttGroupRequestDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} customerId
         * @param {string} sttGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessDelete(customerId, sttGroupId, options) {
            return localVarFp.apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessDelete(customerId, sttGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} customerId
         * @param {string} sttGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessGet(customerId, sttGroupId, options) {
            return localVarFp.apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessGet(customerId, sttGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} customerId
         * @param {string} sttGroupId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessPost(customerId, sttGroupId, options) {
            return localVarFp.apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessPost(customerId, sttGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} sttGroupId
         * @param {string} sttEntryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightDelete(sttGroupId, sttEntryId, options) {
            return localVarFp.apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightDelete(sttGroupId, sttEntryId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} sttGroupId
         * @param {string} sttEntryId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightGet(sttGroupId, sttEntryId, options) {
            return localVarFp.apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightGet(sttGroupId, sttEntryId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} sttGroupId
         * @param {string} sttEntryId
         * @param {SttEntryWeightPatchDTO} [sttEntryWeightPatchDTO]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightPatch(sttGroupId, sttEntryId, sttEntryWeightPatchDTO, options) {
            return localVarFp.apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightPatch(sttGroupId, sttEntryId, sttEntryWeightPatchDTO, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {Array<string>} [names]
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SttGroupsGet(names, skip, take, options) {
            return localVarFp.apiV1SttGroupsGet(names, skip, take, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1SttGroupsIdGet(id, options) {
            return localVarFp.apiV1SttGroupsIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.SttApiFactory = SttApiFactory;
/**
 * SttApi - object-oriented interface
 * @export
 * @class SttApi
 * @extends {BaseAPI}
 */
class SttApi extends base_1.BaseAPI {
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SttApi
     */
    apiV1ManagementSttEntriesIdDelete(id, options) {
        return exports.SttApiFp(this.configuration).apiV1ManagementSttEntriesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SttApi
     */
    apiV1ManagementSttEntriesIdGet(id, options) {
        return exports.SttApiFp(this.configuration).apiV1ManagementSttEntriesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {SttEntryPatchDTO} [sttEntryPatchDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SttApi
     */
    apiV1ManagementSttEntriesIdPatch(id, sttEntryPatchDTO, options) {
        return exports.SttApiFp(this.configuration).apiV1ManagementSttEntriesIdPatch(id, sttEntryPatchDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {SttEntryRequestDTO} [sttEntryRequestDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SttApi
     */
    apiV1ManagementSttEntriesPost(sttEntryRequestDTO, options) {
        return exports.SttApiFp(this.configuration).apiV1ManagementSttEntriesPost(sttEntryRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {SttEntryWeightRequestDTO} [sttEntryWeightRequestDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SttApi
     */
    apiV1ManagementSttEntriesWeightPost(sttEntryWeightRequestDTO, options) {
        return exports.SttApiFp(this.configuration).apiV1ManagementSttEntriesWeightPost(sttEntryWeightRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {Array<string>} [names]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SttApi
     */
    apiV1ManagementSttGroupsGet(names, skip, take, options) {
        return exports.SttApiFp(this.configuration).apiV1ManagementSttGroupsGet(names, skip, take, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SttApi
     */
    apiV1ManagementSttGroupsIdDelete(id, options) {
        return exports.SttApiFp(this.configuration).apiV1ManagementSttGroupsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SttApi
     */
    apiV1ManagementSttGroupsIdEntriesGet(id, options) {
        return exports.SttApiFp(this.configuration).apiV1ManagementSttGroupsIdEntriesGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SttApi
     */
    apiV1ManagementSttGroupsIdGet(id, options) {
        return exports.SttApiFp(this.configuration).apiV1ManagementSttGroupsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {SttGroupPatchDTO} [sttGroupPatchDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SttApi
     */
    apiV1ManagementSttGroupsIdPatch(id, sttGroupPatchDTO, options) {
        return exports.SttApiFp(this.configuration).apiV1ManagementSttGroupsIdPatch(id, sttGroupPatchDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {SttGroupRequestDTO} [sttGroupRequestDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SttApi
     */
    apiV1ManagementSttGroupsPost(sttGroupRequestDTO, options) {
        return exports.SttApiFp(this.configuration).apiV1ManagementSttGroupsPost(sttGroupRequestDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} customerId
     * @param {string} sttGroupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SttApi
     */
    apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessDelete(customerId, sttGroupId, options) {
        return exports.SttApiFp(this.configuration).apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessDelete(customerId, sttGroupId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} customerId
     * @param {string} sttGroupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SttApi
     */
    apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessGet(customerId, sttGroupId, options) {
        return exports.SttApiFp(this.configuration).apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessGet(customerId, sttGroupId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} customerId
     * @param {string} sttGroupId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SttApi
     */
    apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessPost(customerId, sttGroupId, options) {
        return exports.SttApiFp(this.configuration).apiV1ManagementSttGroupsSttGroupIdCustomersCustomerIdAccessPost(customerId, sttGroupId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} sttGroupId
     * @param {string} sttEntryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SttApi
     */
    apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightDelete(sttGroupId, sttEntryId, options) {
        return exports.SttApiFp(this.configuration).apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightDelete(sttGroupId, sttEntryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} sttGroupId
     * @param {string} sttEntryId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SttApi
     */
    apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightGet(sttGroupId, sttEntryId, options) {
        return exports.SttApiFp(this.configuration).apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightGet(sttGroupId, sttEntryId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} sttGroupId
     * @param {string} sttEntryId
     * @param {SttEntryWeightPatchDTO} [sttEntryWeightPatchDTO]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SttApi
     */
    apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightPatch(sttGroupId, sttEntryId, sttEntryWeightPatchDTO, options) {
        return exports.SttApiFp(this.configuration).apiV1ManagementSttGroupsSttGroupIdEntriesSttEntryIdWeightPatch(sttGroupId, sttEntryId, sttEntryWeightPatchDTO, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {Array<string>} [names]
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SttApi
     */
    apiV1SttGroupsGet(names, skip, take, options) {
        return exports.SttApiFp(this.configuration).apiV1SttGroupsGet(names, skip, take, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SttApi
     */
    apiV1SttGroupsIdGet(id, options) {
        return exports.SttApiFp(this.configuration).apiV1SttGroupsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SttApi = SttApi;
//# sourceMappingURL=stt-api.js.map