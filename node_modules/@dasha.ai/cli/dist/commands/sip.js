"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sipCommand = void 0;
const commander = require("commander");
const dasha = require("@dasha.ai/sdk");
const promptly = require("promptly");
exports.sipCommand = commander.createCommand();
exports.sipCommand.name("sip").description("SIP configuration settings");
//#region inbound
exports.sipCommand
    .command("create-inbound <configName>")
    .description("create an inbound SIP configuration")
    .requiredOption("--application-name <applicationName>")
    .option("--group-name <groupName>")
    .option("--ip-acls <listOfIpsWithMasks>", "", (value) => value.split(","))
    .option("--password <password>")
    .option("--ask-password")
    .option("--priority <value>", "", (value) => parseInt(value, 10), 0)
    .action((configName, options) => __awaiter(void 0, void 0, void 0, function* () {
    if (options.askPassword)
        options.password = yield promptly.password("Password:");
    yield dasha.sip.inboundConfigs.createConfig(configName, options);
}));
exports.sipCommand
    .command("delete-inbound <configName>")
    .description("delete an inbound SIP configuration")
    .option("-q --quiet", "do not complain if config does not exist")
    .action((configName, options) => __awaiter(void 0, void 0, void 0, function* () {
    const { quiet } = options;
    yield dasha.sip.inboundConfigs.deleteConfig(configName, { quiet });
}));
exports.sipCommand
    .command("list-inbound")
    .description("list available inbound SIP configurations")
    .action(() => __awaiter(void 0, void 0, void 0, function* () {
    const configs = yield dasha.sip.inboundConfigs.listConfigs();
    console.log(JSON.stringify(configs, undefined, 2));
}));
exports.sipCommand
    .command("update-inbound <configName>")
    .description("update an inbound SIP configuration")
    .option("--application-name <applicationName>")
    .option("--group-name <groupName>")
    .option("--ip-acls <listOfIpsWithMasks>", "", (value) => value.split(","))
    .option("--password <password>")
    .option("--ask-password")
    .option("--priority <value>", "", (value) => parseInt(value, 10))
    .action((configName, options) => __awaiter(void 0, void 0, void 0, function* () {
    if (options.askPassword)
        options.password = yield promptly.password("Password:");
    yield dasha.sip.inboundConfigs.updateConfig(configName, options);
}));
//#endregion
//#region outbound
exports.sipCommand
    .command("create-outbound <configName>")
    .description("create an outbound SIP configuration")
    .requiredOption("--server <serverIpOrDns>")
    .requiredOption("--account <sipAccountName>")
    .option("--domain <domain>")
    .option("--password <password>")
    .option("--ask-password")
    .option("--transport <tcp|udp>", "", "udp")
    .action((configName, options) => __awaiter(void 0, void 0, void 0, function* () {
    if (options.askPassword)
        options.password = yield promptly.password("Password:");
    yield dasha.sip.outboundConfigs.createConfig(configName, options);
}));
exports.sipCommand
    .command("delete-outbound <configName>")
    .description("delete an outbound SIP configuration")
    .option("-q --quiet", "do not complain if config does not exist")
    .action((configName, options) => __awaiter(void 0, void 0, void 0, function* () {
    const { quiet } = options;
    yield dasha.sip.outboundConfigs.deleteConfig(configName, { quiet });
}));
exports.sipCommand
    .command("list-outbound")
    .description("list available outbound SIP configurations")
    .action(() => __awaiter(void 0, void 0, void 0, function* () {
    const configs = yield dasha.sip.outboundConfigs.listConfigs();
    console.log(JSON.stringify(configs, undefined, 2));
}));
exports.sipCommand
    .command("update-outbound <configName>")
    .description("update an outbound SIP configuration")
    .option("--server <serverIpOrDns>")
    .option("--account <sipAccountName>")
    .option("--domain <domain>")
    .option("--password <password>")
    .option("--ask-password")
    .action((configName, options) => __awaiter(void 0, void 0, void 0, function* () {
    if (options.askPassword)
        options.password = yield promptly.password("Password:");
    yield dasha.sip.outboundConfigs.updateConfig(configName, options);
}));
//#endregion
//# sourceMappingURL=sip.js.map