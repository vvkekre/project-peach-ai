"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.groupCommand = void 0;
const commander = require("commander");
const dasha = require("@dasha.ai/sdk");
exports.groupCommand = commander.createCommand();
exports.groupCommand.name("group").description("group settings management");
exports.groupCommand
    .command("create <groupName>")
    .description("add a new group")
    .option("--max-concurrency <value>", "", (value) => parseInt(value, 10))
    .option("-d --description <string>")
    .action((groupName, options) => __awaiter(void 0, void 0, void 0, function* () {
    const { description, maxConcurrency } = options;
    yield dasha.groups.createGroup(groupName, { description, maxConcurrency });
}));
exports.groupCommand
    .command("delete <groupName>")
    .description("delete a group")
    .option("-q --quiet", "do not complain if the group does not exist")
    .action((groupName, options) => __awaiter(void 0, void 0, void 0, function* () {
    const { quiet } = options;
    yield dasha.groups.deleteGroup(groupName, { quiet });
}));
exports.groupCommand
    .command("list")
    .description("list all existing groups")
    .option("--include-temporary")
    .action((options) => __awaiter(void 0, void 0, void 0, function* () {
    const { includeTemporary } = options;
    const groups = yield dasha.groups.listGroups({ includeTemporary });
    console.log(JSON.stringify(groups, undefined, 2));
}));
exports.groupCommand
    .command("update <groupName>")
    .description("update group settings")
    .option("--name <newName>")
    .option("--max-concurrency <value>", "", (value) => parseInt(value, 10))
    .option("--description <string>")
    .action((groupName, options) => __awaiter(void 0, void 0, void 0, function* () {
    const { description, maxConcurrency } = options;
    yield dasha.groups.updateGroup(groupName, { description, maxConcurrency });
}));
//# sourceMappingURL=group.js.map