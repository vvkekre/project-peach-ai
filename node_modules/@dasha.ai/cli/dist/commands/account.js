"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.accountCommand = void 0;
const events_1 = require("events");
const http = require("http");
const commander = require("commander");
const dasha = require("@dasha.ai/sdk");
const open = require("open");
const promptly = require("promptly");
function printAccount(accountName, account, isCurrent) {
    console.log(`${accountName} ${isCurrent ? "(current)" : ""}:`);
    console.log(`  server: ${account.server}`);
    console.log(`  apiKey: ${account.apiKey}`);
    if (account.insecure)
        console.log(`  insecure: true`);
    console.log();
}
exports.accountCommand = commander.createCommand();
exports.accountCommand.name("account").description("Dasha.AI account management");
exports.accountCommand
    .command("add [accountName]")
    .description("add a new account")
    .requiredOption("--server <server>", "server url", "app.us.dasha.ai")
    .option("--api-key <key>", "Dasha API key")
    .option("--insecure", "use an insecure connection")
    .option("-f --overwrite", "overwrite an existing account")
    .action((accountName, options) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    accountName !== null && accountName !== void 0 ? accountName : (accountName = "default");
    const { server, insecure, overwrite } = options;
    const apiKey = (_a = options.apiKey) !== null && _a !== void 0 ? _a : (yield promptly.prompt("Enter your API key:"));
    yield dasha.account.setAccount(accountName, { server, apiKey, insecure: insecure || undefined }, { overwrite });
}));
exports.accountCommand
    .command("info [accountName]")
    .description("print account details")
    .action((accountName) => __awaiter(void 0, void 0, void 0, function* () {
    const currentAccountName = yield dasha.account.getCurrentAccountName();
    accountName !== null && accountName !== void 0 ? accountName : (accountName = currentAccountName);
    if (accountName === undefined) {
        throw new Error(`no account is set as current`);
    }
    const account = yield dasha.account.getAccount(accountName);
    printAccount(accountName, account, accountName === currentAccountName);
}));
exports.accountCommand
    .command("list")
    .description("list all known accounts")
    .action(() => __awaiter(void 0, void 0, void 0, function* () {
    const accounts = yield dasha.account.listAccounts();
    const currentAccountName = yield dasha.account.getCurrentAccountName();
    for (const [accountName, account] of Object.entries(accounts)) {
        printAccount(accountName, account, accountName === currentAccountName);
    }
}));
exports.accountCommand
    .command("login [accountName]")
    .description("log into an account")
    .option("--server <server>", "server url", "app.us.dasha.ai")
    .option("--insecure", "use an insecure connection")
    .action((accountName, options) => __awaiter(void 0, void 0, void 0, function* () {
    accountName !== null && accountName !== void 0 ? accountName : (accountName = "default");
    const { server, insecure } = options;
    const redirectServer = http.createServer();
    redirectServer.listen({ host: "localhost", port: 0 });
    yield events_1.once(redirectServer, "listening");
    const { address, port } = redirectServer.address();
    const redirectUri = `http://${address}:${port}`;
    const account = yield dasha.auth.authorize({
        server,
        insecure,
        redirectUri,
        responseType: "form",
        callback: (authUri) => __awaiter(void 0, void 0, void 0, function* () {
            yield open(authUri, { wait: false });
            const [req, res] = (yield events_1.once(redirectServer, "request"));
            res.writeHead(200, { Connection: "close" });
            res.end("You can now close this page.");
            return req;
        }),
    });
    redirectServer.close();
    redirectServer.unref();
    yield dasha.account.setAccount(accountName, account, { overwrite: true });
    yield dasha.account.setCurrentAccountName(accountName);
    printAccount(accountName, account, true);
}));
exports.accountCommand
    .command("remove <accountName>")
    .description("remove an account")
    .option("-q --quiet", "do not complain if the account does not exist")
    .action((accountName, options) => __awaiter(void 0, void 0, void 0, function* () {
    const { quiet } = options;
    yield dasha.account.deleteAccount(accountName, { quiet });
}));
exports.accountCommand
    .command("rename <oldAccountName> <newAccountName>")
    .description("rename an account")
    .option("-f --overwrite", "overwrite an existing account")
    .action((oldAccountName, newAccountName, options) => __awaiter(void 0, void 0, void 0, function* () {
    const { overwrite } = options;
    yield dasha.account.renameAccount(oldAccountName, newAccountName, { overwrite });
}));
exports.accountCommand
    .command("start-trial [accountName]")
    .option("--server <url>", "server url", "app.us.dasha.ai")
    .option("--insecure", "use an insecure connection")
    .action((accountName, options) => __awaiter(void 0, void 0, void 0, function* () {
    accountName !== null && accountName !== void 0 ? accountName : (accountName = "default");
    const { server, insecure } = options;
    const account = yield dasha.auth.startTrial({ server, insecure });
    yield dasha.account.setAccount(accountName, account, { overwrite: true });
    yield dasha.account.setCurrentAccountName(accountName);
}));
exports.accountCommand
    .command("use <accountName>")
    .description("set an account as current")
    .action((accountName) => __awaiter(void 0, void 0, void 0, function* () {
    yield dasha.account.setCurrentAccountName(accountName);
}));
//# sourceMappingURL=account.js.map