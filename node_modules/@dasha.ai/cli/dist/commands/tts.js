"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ttsCommand = void 0;
const fs_1 = require("fs");
const commander = require("commander");
const dasha = require("@dasha.ai/sdk");
exports.ttsCommand = commander.createCommand();
exports.ttsCommand.name("tts").description("text-to-speech synthesis");
exports.ttsCommand
    .command("synthesize <text>")
    .requiredOption("-o --output <filename>")
    .option("--provider-name <name>", "TTS provider name", "dasha")
    .option("--lang <code>", "", "en-US")
    .option("--speaker <name>", "", "V2")
    .option("--emotion <emotion>", "", "neutral")
    .option("--speed <value>", "", (value) => parseFloat(value), 1.0)
    .option("--variation <value>", "", (value) => parseInt(value), 0)
    .action((text, options) => __awaiter(void 0, void 0, void 0, function* () {
    const { output, providerName } = options, voice = __rest(options, ["output", "providerName"]);
    const data = yield dasha.tts.synthesize(text, voice, { providerName });
    yield fs_1.promises.writeFile(output, data);
}));
//# sourceMappingURL=tts.js.map